// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package domain

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type EnumAddressUse int64
const (
  EnumAddressUse_home EnumAddressUse = 0
  EnumAddressUse_work EnumAddressUse = 1
  EnumAddressUse_temp EnumAddressUse = 2
  EnumAddressUse_old EnumAddressUse = 3
)

func (p EnumAddressUse) String() string {
  switch p {
  case EnumAddressUse_home: return "home"
  case EnumAddressUse_work: return "work"
  case EnumAddressUse_temp: return "temp"
  case EnumAddressUse_old: return "old"
  }
  return "<UNSET>"
}

func EnumAddressUseFromString(s string) (EnumAddressUse, error) {
  switch s {
  case "home": return EnumAddressUse_home, nil 
  case "work": return EnumAddressUse_work, nil 
  case "temp": return EnumAddressUse_temp, nil 
  case "old": return EnumAddressUse_old, nil 
  }
  return EnumAddressUse(0), fmt.Errorf("not a valid EnumAddressUse string")
}


func EnumAddressUsePtr(v EnumAddressUse) *EnumAddressUse { return &v }

func (p EnumAddressUse) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EnumAddressUse) UnmarshalText(text []byte) error {
q, err := EnumAddressUseFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EnumAddressUse) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EnumAddressUse(v)
return nil
}

func (p * EnumAddressUse) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EnumPatientContactGender int64
const (
  EnumPatientContactGender_male EnumPatientContactGender = 0
  EnumPatientContactGender_female EnumPatientContactGender = 1
  EnumPatientContactGender_other EnumPatientContactGender = 2
  EnumPatientContactGender_unknown EnumPatientContactGender = 3
)

func (p EnumPatientContactGender) String() string {
  switch p {
  case EnumPatientContactGender_male: return "male"
  case EnumPatientContactGender_female: return "female"
  case EnumPatientContactGender_other: return "other"
  case EnumPatientContactGender_unknown: return "unknown"
  }
  return "<UNSET>"
}

func EnumPatientContactGenderFromString(s string) (EnumPatientContactGender, error) {
  switch s {
  case "male": return EnumPatientContactGender_male, nil 
  case "female": return EnumPatientContactGender_female, nil 
  case "other": return EnumPatientContactGender_other, nil 
  case "unknown": return EnumPatientContactGender_unknown, nil 
  }
  return EnumPatientContactGender(0), fmt.Errorf("not a valid EnumPatientContactGender string")
}


func EnumPatientContactGenderPtr(v EnumPatientContactGender) *EnumPatientContactGender { return &v }

func (p EnumPatientContactGender) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EnumPatientContactGender) UnmarshalText(text []byte) error {
q, err := EnumPatientContactGenderFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EnumPatientContactGender) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EnumPatientContactGender(v)
return nil
}

func (p * EnumPatientContactGender) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EnumPatientLinkType int64
const (
  EnumPatientLinkType_replaced_by EnumPatientLinkType = 0
  EnumPatientLinkType_replaces EnumPatientLinkType = 1
  EnumPatientLinkType_refer EnumPatientLinkType = 2
  EnumPatientLinkType_seealso EnumPatientLinkType = 3
)

func (p EnumPatientLinkType) String() string {
  switch p {
  case EnumPatientLinkType_replaced_by: return "replaced_by"
  case EnumPatientLinkType_replaces: return "replaces"
  case EnumPatientLinkType_refer: return "refer"
  case EnumPatientLinkType_seealso: return "seealso"
  }
  return "<UNSET>"
}

func EnumPatientLinkTypeFromString(s string) (EnumPatientLinkType, error) {
  switch s {
  case "replaced_by": return EnumPatientLinkType_replaced_by, nil 
  case "replaces": return EnumPatientLinkType_replaces, nil 
  case "refer": return EnumPatientLinkType_refer, nil 
  case "seealso": return EnumPatientLinkType_seealso, nil 
  }
  return EnumPatientLinkType(0), fmt.Errorf("not a valid EnumPatientLinkType string")
}


func EnumPatientLinkTypePtr(v EnumPatientLinkType) *EnumPatientLinkType { return &v }

func (p EnumPatientLinkType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EnumPatientLinkType) UnmarshalText(text []byte) error {
q, err := EnumPatientLinkTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EnumPatientLinkType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EnumPatientLinkType(v)
return nil
}

func (p * EnumPatientLinkType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EnumPatientGender int64
const (
  EnumPatientGender_male EnumPatientGender = 0
  EnumPatientGender_female EnumPatientGender = 1
  EnumPatientGender_other EnumPatientGender = 2
  EnumPatientGender_unknown EnumPatientGender = 3
)

func (p EnumPatientGender) String() string {
  switch p {
  case EnumPatientGender_male: return "male"
  case EnumPatientGender_female: return "female"
  case EnumPatientGender_other: return "other"
  case EnumPatientGender_unknown: return "unknown"
  }
  return "<UNSET>"
}

func EnumPatientGenderFromString(s string) (EnumPatientGender, error) {
  switch s {
  case "male": return EnumPatientGender_male, nil 
  case "female": return EnumPatientGender_female, nil 
  case "other": return EnumPatientGender_other, nil 
  case "unknown": return EnumPatientGender_unknown, nil 
  }
  return EnumPatientGender(0), fmt.Errorf("not a valid EnumPatientGender string")
}


func EnumPatientGenderPtr(v EnumPatientGender) *EnumPatientGender { return &v }

func (p EnumPatientGender) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EnumPatientGender) UnmarshalText(text []byte) error {
q, err := EnumPatientGenderFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EnumPatientGender) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EnumPatientGender(v)
return nil
}

func (p * EnumPatientGender) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EnumNarrativeStatus int64
const (
  EnumNarrativeStatus_generated EnumNarrativeStatus = 0
  EnumNarrativeStatus_extensions EnumNarrativeStatus = 1
  EnumNarrativeStatus_additional EnumNarrativeStatus = 2
  EnumNarrativeStatus_empty EnumNarrativeStatus = 3
)

func (p EnumNarrativeStatus) String() string {
  switch p {
  case EnumNarrativeStatus_generated: return "generated"
  case EnumNarrativeStatus_extensions: return "extensions"
  case EnumNarrativeStatus_additional: return "additional"
  case EnumNarrativeStatus_empty: return "empty"
  }
  return "<UNSET>"
}

func EnumNarrativeStatusFromString(s string) (EnumNarrativeStatus, error) {
  switch s {
  case "generated": return EnumNarrativeStatus_generated, nil 
  case "extensions": return EnumNarrativeStatus_extensions, nil 
  case "additional": return EnumNarrativeStatus_additional, nil 
  case "empty": return EnumNarrativeStatus_empty, nil 
  }
  return EnumNarrativeStatus(0), fmt.Errorf("not a valid EnumNarrativeStatus string")
}


func EnumNarrativeStatusPtr(v EnumNarrativeStatus) *EnumNarrativeStatus { return &v }

func (p EnumNarrativeStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EnumNarrativeStatus) UnmarshalText(text []byte) error {
q, err := EnumNarrativeStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EnumNarrativeStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EnumNarrativeStatus(v)
return nil
}

func (p * EnumNarrativeStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EnumPatientResourceType int64
const (
  EnumPatientResourceType_Patient EnumPatientResourceType = 0
)

func (p EnumPatientResourceType) String() string {
  switch p {
  case EnumPatientResourceType_Patient: return "Patient"
  }
  return "<UNSET>"
}

func EnumPatientResourceTypeFromString(s string) (EnumPatientResourceType, error) {
  switch s {
  case "Patient": return EnumPatientResourceType_Patient, nil 
  }
  return EnumPatientResourceType(0), fmt.Errorf("not a valid EnumPatientResourceType string")
}


func EnumPatientResourceTypePtr(v EnumPatientResourceType) *EnumPatientResourceType { return &v }

func (p EnumPatientResourceType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EnumPatientResourceType) UnmarshalText(text []byte) error {
q, err := EnumPatientResourceTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EnumPatientResourceType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EnumPatientResourceType(v)
return nil
}

func (p * EnumPatientResourceType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EnumContactPointUse int64
const (
  EnumContactPointUse_home EnumContactPointUse = 0
  EnumContactPointUse_work EnumContactPointUse = 1
  EnumContactPointUse_temp EnumContactPointUse = 2
  EnumContactPointUse_old EnumContactPointUse = 3
  EnumContactPointUse_mobile EnumContactPointUse = 4
)

func (p EnumContactPointUse) String() string {
  switch p {
  case EnumContactPointUse_home: return "home"
  case EnumContactPointUse_work: return "work"
  case EnumContactPointUse_temp: return "temp"
  case EnumContactPointUse_old: return "old"
  case EnumContactPointUse_mobile: return "mobile"
  }
  return "<UNSET>"
}

func EnumContactPointUseFromString(s string) (EnumContactPointUse, error) {
  switch s {
  case "home": return EnumContactPointUse_home, nil 
  case "work": return EnumContactPointUse_work, nil 
  case "temp": return EnumContactPointUse_temp, nil 
  case "old": return EnumContactPointUse_old, nil 
  case "mobile": return EnumContactPointUse_mobile, nil 
  }
  return EnumContactPointUse(0), fmt.Errorf("not a valid EnumContactPointUse string")
}


func EnumContactPointUsePtr(v EnumContactPointUse) *EnumContactPointUse { return &v }

func (p EnumContactPointUse) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EnumContactPointUse) UnmarshalText(text []byte) error {
q, err := EnumContactPointUseFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EnumContactPointUse) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EnumContactPointUse(v)
return nil
}

func (p * EnumContactPointUse) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EnumIdentifierUse int64
const (
  EnumIdentifierUse_usual EnumIdentifierUse = 0
  EnumIdentifierUse_official EnumIdentifierUse = 1
  EnumIdentifierUse_temp EnumIdentifierUse = 2
  EnumIdentifierUse_secondary EnumIdentifierUse = 3
)

func (p EnumIdentifierUse) String() string {
  switch p {
  case EnumIdentifierUse_usual: return "usual"
  case EnumIdentifierUse_official: return "official"
  case EnumIdentifierUse_temp: return "temp"
  case EnumIdentifierUse_secondary: return "secondary"
  }
  return "<UNSET>"
}

func EnumIdentifierUseFromString(s string) (EnumIdentifierUse, error) {
  switch s {
  case "usual": return EnumIdentifierUse_usual, nil 
  case "official": return EnumIdentifierUse_official, nil 
  case "temp": return EnumIdentifierUse_temp, nil 
  case "secondary": return EnumIdentifierUse_secondary, nil 
  }
  return EnumIdentifierUse(0), fmt.Errorf("not a valid EnumIdentifierUse string")
}


func EnumIdentifierUsePtr(v EnumIdentifierUse) *EnumIdentifierUse { return &v }

func (p EnumIdentifierUse) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EnumIdentifierUse) UnmarshalText(text []byte) error {
q, err := EnumIdentifierUseFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EnumIdentifierUse) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EnumIdentifierUse(v)
return nil
}

func (p * EnumIdentifierUse) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EnumContactPointSystem int64
const (
  EnumContactPointSystem_phone EnumContactPointSystem = 0
  EnumContactPointSystem_fax EnumContactPointSystem = 1
  EnumContactPointSystem_email EnumContactPointSystem = 2
  EnumContactPointSystem_pager EnumContactPointSystem = 3
  EnumContactPointSystem_url EnumContactPointSystem = 4
  EnumContactPointSystem_sms EnumContactPointSystem = 5
  EnumContactPointSystem_other EnumContactPointSystem = 6
)

func (p EnumContactPointSystem) String() string {
  switch p {
  case EnumContactPointSystem_phone: return "phone"
  case EnumContactPointSystem_fax: return "fax"
  case EnumContactPointSystem_email: return "email"
  case EnumContactPointSystem_pager: return "pager"
  case EnumContactPointSystem_url: return "url"
  case EnumContactPointSystem_sms: return "sms"
  case EnumContactPointSystem_other: return "other"
  }
  return "<UNSET>"
}

func EnumContactPointSystemFromString(s string) (EnumContactPointSystem, error) {
  switch s {
  case "phone": return EnumContactPointSystem_phone, nil 
  case "fax": return EnumContactPointSystem_fax, nil 
  case "email": return EnumContactPointSystem_email, nil 
  case "pager": return EnumContactPointSystem_pager, nil 
  case "url": return EnumContactPointSystem_url, nil 
  case "sms": return EnumContactPointSystem_sms, nil 
  case "other": return EnumContactPointSystem_other, nil 
  }
  return EnumContactPointSystem(0), fmt.Errorf("not a valid EnumContactPointSystem string")
}


func EnumContactPointSystemPtr(v EnumContactPointSystem) *EnumContactPointSystem { return &v }

func (p EnumContactPointSystem) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EnumContactPointSystem) UnmarshalText(text []byte) error {
q, err := EnumContactPointSystemFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EnumContactPointSystem) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EnumContactPointSystem(v)
return nil
}

func (p * EnumContactPointSystem) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EnumAddressType int64
const (
  EnumAddressType_postal EnumAddressType = 0
  EnumAddressType_physical EnumAddressType = 1
  EnumAddressType_both EnumAddressType = 2
)

func (p EnumAddressType) String() string {
  switch p {
  case EnumAddressType_postal: return "postal"
  case EnumAddressType_physical: return "physical"
  case EnumAddressType_both: return "both"
  }
  return "<UNSET>"
}

func EnumAddressTypeFromString(s string) (EnumAddressType, error) {
  switch s {
  case "postal": return EnumAddressType_postal, nil 
  case "physical": return EnumAddressType_physical, nil 
  case "both": return EnumAddressType_both, nil 
  }
  return EnumAddressType(0), fmt.Errorf("not a valid EnumAddressType string")
}


func EnumAddressTypePtr(v EnumAddressType) *EnumAddressType { return &v }

func (p EnumAddressType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EnumAddressType) UnmarshalText(text []byte) error {
q, err := EnumAddressTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EnumAddressType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EnumAddressType(v)
return nil
}

func (p * EnumAddressType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EnumHumanNameUse int64
const (
  EnumHumanNameUse_usual EnumHumanNameUse = 0
  EnumHumanNameUse_official EnumHumanNameUse = 1
  EnumHumanNameUse_temp EnumHumanNameUse = 2
  EnumHumanNameUse_nickname EnumHumanNameUse = 3
  EnumHumanNameUse_anonymous EnumHumanNameUse = 4
  EnumHumanNameUse_old EnumHumanNameUse = 5
  EnumHumanNameUse_maiden EnumHumanNameUse = 6
)

func (p EnumHumanNameUse) String() string {
  switch p {
  case EnumHumanNameUse_usual: return "usual"
  case EnumHumanNameUse_official: return "official"
  case EnumHumanNameUse_temp: return "temp"
  case EnumHumanNameUse_nickname: return "nickname"
  case EnumHumanNameUse_anonymous: return "anonymous"
  case EnumHumanNameUse_old: return "old"
  case EnumHumanNameUse_maiden: return "maiden"
  }
  return "<UNSET>"
}

func EnumHumanNameUseFromString(s string) (EnumHumanNameUse, error) {
  switch s {
  case "usual": return EnumHumanNameUse_usual, nil 
  case "official": return EnumHumanNameUse_official, nil 
  case "temp": return EnumHumanNameUse_temp, nil 
  case "nickname": return EnumHumanNameUse_nickname, nil 
  case "anonymous": return EnumHumanNameUse_anonymous, nil 
  case "old": return EnumHumanNameUse_old, nil 
  case "maiden": return EnumHumanNameUse_maiden, nil 
  }
  return EnumHumanNameUse(0), fmt.Errorf("not a valid EnumHumanNameUse string")
}


func EnumHumanNameUsePtr(v EnumHumanNameUse) *EnumHumanNameUse { return &v }

func (p EnumHumanNameUse) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EnumHumanNameUse) UnmarshalText(text []byte) error {
q, err := EnumHumanNameUseFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EnumHumanNameUse) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EnumHumanNameUse(v)
return nil
}

func (p * EnumHumanNameUse) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - ValueId
//  - URL
type Extension struct {
  ValueId string
  URL string
}

func NewExtension() *Extension {
  return &Extension{}
}

var Extension_ValueId_DEFAULT string
func (p *Extension) GetValueId() string {
  if !p.IsSetValueId() {
    return Extension_ValueId_DEFAULT
  }
return *p.ValueId
}
var Extension_URL_DEFAULT string
func (p *Extension) GetURL() string {
  if !p.IsSetURL() {
    return Extension_URL_DEFAULT
  }
return *p.URL
}
func (p *Extension) IsSetValueId() bool {
  return p.ValueId != nil
}

func (p *Extension) IsSetURL() bool {
  return p.URL != nil
}

func (p *Extension) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Extension)  ReadField_1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -1: ", err)
} else {
  p.ValueId = &v
}
  return nil
}

func (p *Extension)  ReadField_2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -2: ", err)
} else {
  p.URL = &v
}
  return nil
}

func (p *Extension) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Extension"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Extension) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetURL() {
    if err := oprot.WriteFieldBegin("url", thrift.STRING, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:url: ", p), err) }
    if err := oprot.WriteString(string(*p.URL)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.url (-2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:url: ", p), err) }
  }
  return err
}

func (p *Extension) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetValueId() {
    if err := oprot.WriteFieldBegin("valueId", thrift.STRING, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:valueId: ", p), err) }
    if err := oprot.WriteString(string(*p.ValueId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.valueId (-1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:valueId: ", p), err) }
  }
  return err
}

func (p *Extension) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Extension(%+v)", *p)
}

// Attributes:
//  - ID
//  - Extension
type Element struct {
  ID string
  Extension []*Extension
}

func NewElement() *Element {
  return &Element{}
}

var Element_ID_DEFAULT string
func (p *Element) GetID() string {
  if !p.IsSetID() {
    return Element_ID_DEFAULT
  }
return *p.ID
}
var Element_Extension_DEFAULT []*Extension

func (p *Element) GetExtension() []*Extension {
  return p.Extension
}
func (p *Element) IsSetID() bool {
  return p.ID != nil
}

func (p *Element) IsSetExtension() bool {
  return p.Extension != nil
}

func (p *Element) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Element)  ReadField_1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -1: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *Element)  ReadField_2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.Extension =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &Extension{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Extension = append(p.Extension, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Element) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Element"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Element) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtension() {
    if err := oprot.WriteFieldBegin("extension", thrift.LIST, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:extension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:extension: ", p), err) }
  }
  return err
}

func (p *Element) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (-1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:id: ", p), err) }
  }
  return err
}

func (p *Element) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Element(%+v)", *p)
}

// Attributes:
//  - System
//  - Display
//  - Version
//  - Extension
//  - ID
//  - Code
type Coding struct {
  System string
  Display string
  Version string
  Extension []*Extension
  ID string
  Code string
}

func NewCoding() *Coding {
  return &Coding{}
}

var Coding_System_DEFAULT string
func (p *Coding) GetSystem() string {
  if !p.IsSetSystem() {
    return Coding_System_DEFAULT
  }
return *p.System
}
var Coding_Display_DEFAULT string
func (p *Coding) GetDisplay() string {
  if !p.IsSetDisplay() {
    return Coding_Display_DEFAULT
  }
return *p.Display
}
var Coding_Version_DEFAULT string
func (p *Coding) GetVersion() string {
  if !p.IsSetVersion() {
    return Coding_Version_DEFAULT
  }
return *p.Version
}
var Coding_Extension_DEFAULT []*Extension

func (p *Coding) GetExtension() []*Extension {
  return p.Extension
}
var Coding_ID_DEFAULT string
func (p *Coding) GetID() string {
  if !p.IsSetID() {
    return Coding_ID_DEFAULT
  }
return *p.ID
}
var Coding_Code_DEFAULT string
func (p *Coding) GetCode() string {
  if !p.IsSetCode() {
    return Coding_Code_DEFAULT
  }
return *p.Code
}
func (p *Coding) IsSetSystem() bool {
  return p.System != nil
}

func (p *Coding) IsSetDisplay() bool {
  return p.Display != nil
}

func (p *Coding) IsSetVersion() bool {
  return p.Version != nil
}

func (p *Coding) IsSetExtension() bool {
  return p.Extension != nil
}

func (p *Coding) IsSetID() bool {
  return p.ID != nil
}

func (p *Coding) IsSetCode() bool {
  return p.Code != nil
}

func (p *Coding) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    case -5:
      if err := p.ReadField_5(iprot); err != nil {
        return err
      }
    case -6:
      if err := p.ReadField_6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Coding)  ReadField_1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -1: ", err)
} else {
  p.System = &v
}
  return nil
}

func (p *Coding)  ReadField_2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -2: ", err)
} else {
  p.Display = &v
}
  return nil
}

func (p *Coding)  ReadField_3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -3: ", err)
} else {
  p.Version = &v
}
  return nil
}

func (p *Coding)  ReadField_4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.Extension =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &Extension{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Extension = append(p.Extension, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Coding)  ReadField_5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -5: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *Coding)  ReadField_6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -6: ", err)
} else {
  p.Code = &v
}
  return nil
}

func (p *Coding) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Coding"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_6(oprot); err != nil { return err }
    if err := p.writeField_5(oprot); err != nil { return err }
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Coding) writeField_6(oprot thrift.TProtocol) (err error) {
  if p.IsSetCode() {
    if err := oprot.WriteFieldBegin("code", thrift.STRING, -6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -6:code: ", p), err) }
    if err := oprot.WriteString(string(*p.Code)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.code (-6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -6:code: ", p), err) }
  }
  return err
}

func (p *Coding) writeField_5(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, -5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (-5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -5:id: ", p), err) }
  }
  return err
}

func (p *Coding) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtension() {
    if err := oprot.WriteFieldBegin("extension", thrift.LIST, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:extension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:extension: ", p), err) }
  }
  return err
}

func (p *Coding) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetVersion() {
    if err := oprot.WriteFieldBegin("version", thrift.STRING, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:version: ", p), err) }
    if err := oprot.WriteString(string(*p.Version)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.version (-3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:version: ", p), err) }
  }
  return err
}

func (p *Coding) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDisplay() {
    if err := oprot.WriteFieldBegin("display", thrift.STRING, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:display: ", p), err) }
    if err := oprot.WriteString(string(*p.Display)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.display (-2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:display: ", p), err) }
  }
  return err
}

func (p *Coding) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSystem() {
    if err := oprot.WriteFieldBegin("system", thrift.STRING, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:system: ", p), err) }
    if err := oprot.WriteString(string(*p.System)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.system (-1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:system: ", p), err) }
  }
  return err
}

func (p *Coding) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Coding(%+v)", *p)
}

// Attributes:
//  - Security
//  - Tag
//  - VersionId
//  - ID
//  - Extension
//  - LastUpdated
//  - Profile
type Meta struct {
  Security []*Coding
  Tag []*Coding
  VersionId string
  ID string
  Extension []*Extension
  LastUpdated string
  Profile []string
}

func NewMeta() *Meta {
  return &Meta{}
}

var Meta_Security_DEFAULT []*Coding

func (p *Meta) GetSecurity() []*Coding {
  return p.Security
}
var Meta_Tag_DEFAULT []*Coding

func (p *Meta) GetTag() []*Coding {
  return p.Tag
}
var Meta_VersionId_DEFAULT string
func (p *Meta) GetVersionId() string {
  if !p.IsSetVersionId() {
    return Meta_VersionId_DEFAULT
  }
return *p.VersionId
}
var Meta_ID_DEFAULT string
func (p *Meta) GetID() string {
  if !p.IsSetID() {
    return Meta_ID_DEFAULT
  }
return *p.ID
}
var Meta_Extension_DEFAULT []*Extension

func (p *Meta) GetExtension() []*Extension {
  return p.Extension
}
var Meta_LastUpdated_DEFAULT string
func (p *Meta) GetLastUpdated() string {
  if !p.IsSetLastUpdated() {
    return Meta_LastUpdated_DEFAULT
  }
return *p.LastUpdated
}
var Meta_Profile_DEFAULT []string

func (p *Meta) GetProfile() []string {
  return p.Profile
}
func (p *Meta) IsSetSecurity() bool {
  return p.Security != nil
}

func (p *Meta) IsSetTag() bool {
  return p.Tag != nil
}

func (p *Meta) IsSetVersionId() bool {
  return p.VersionId != nil
}

func (p *Meta) IsSetID() bool {
  return p.ID != nil
}

func (p *Meta) IsSetExtension() bool {
  return p.Extension != nil
}

func (p *Meta) IsSetLastUpdated() bool {
  return p.LastUpdated != nil
}

func (p *Meta) IsSetProfile() bool {
  return p.Profile != nil
}

func (p *Meta) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    case -5:
      if err := p.ReadField_5(iprot); err != nil {
        return err
      }
    case -6:
      if err := p.ReadField_6(iprot); err != nil {
        return err
      }
    case -7:
      if err := p.ReadField_7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Meta)  ReadField_1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Coding, 0, size)
  p.Security =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &Coding{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Security = append(p.Security, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Meta)  ReadField_2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Coding, 0, size)
  p.Tag =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &Coding{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.Tag = append(p.Tag, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Meta)  ReadField_3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -3: ", err)
} else {
  p.VersionId = &v
}
  return nil
}

func (p *Meta)  ReadField_4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -4: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *Meta)  ReadField_5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.Extension =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &Extension{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Extension = append(p.Extension, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Meta)  ReadField_6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -6: ", err)
} else {
  p.LastUpdated = &v
}
  return nil
}

func (p *Meta)  ReadField_7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Profile =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.Profile = append(p.Profile, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Meta) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Meta"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_7(oprot); err != nil { return err }
    if err := p.writeField_6(oprot); err != nil { return err }
    if err := p.writeField_5(oprot); err != nil { return err }
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Meta) writeField_7(oprot thrift.TProtocol) (err error) {
  if p.IsSetProfile() {
    if err := oprot.WriteFieldBegin("profile", thrift.LIST, -7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -7:profile: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Profile)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Profile {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -7:profile: ", p), err) }
  }
  return err
}

func (p *Meta) writeField_6(oprot thrift.TProtocol) (err error) {
  if p.IsSetLastUpdated() {
    if err := oprot.WriteFieldBegin("lastUpdated", thrift.STRING, -6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -6:lastUpdated: ", p), err) }
    if err := oprot.WriteString(string(*p.LastUpdated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastUpdated (-6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -6:lastUpdated: ", p), err) }
  }
  return err
}

func (p *Meta) writeField_5(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtension() {
    if err := oprot.WriteFieldBegin("extension", thrift.LIST, -5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:extension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -5:extension: ", p), err) }
  }
  return err
}

func (p *Meta) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (-4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:id: ", p), err) }
  }
  return err
}

func (p *Meta) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetVersionId() {
    if err := oprot.WriteFieldBegin("versionId", thrift.STRING, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:versionId: ", p), err) }
    if err := oprot.WriteString(string(*p.VersionId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.versionId (-3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:versionId: ", p), err) }
  }
  return err
}

func (p *Meta) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTag() {
    if err := oprot.WriteFieldBegin("tag", thrift.LIST, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:tag: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tag)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Tag {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:tag: ", p), err) }
  }
  return err
}

func (p *Meta) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSecurity() {
    if err := oprot.WriteFieldBegin("security", thrift.LIST, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:security: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Security)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Security {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:security: ", p), err) }
  }
  return err
}

func (p *Meta) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Meta(%+v)", *p)
}

// Attributes:
//  - ID
//  - Extension
//  - ImplicitRules
//  - Language
//  - Meta
type Resource struct {
  ID string
  Extension []*Extension
  ImplicitRules string
  Language string
  Meta *Meta
}

func NewResource() *Resource {
  return &Resource{}
}

var Resource_ID_DEFAULT string
func (p *Resource) GetID() string {
  if !p.IsSetID() {
    return Resource_ID_DEFAULT
  }
return *p.ID
}
var Resource_Extension_DEFAULT []*Extension

func (p *Resource) GetExtension() []*Extension {
  return p.Extension
}
var Resource_ImplicitRules_DEFAULT string
func (p *Resource) GetImplicitRules() string {
  if !p.IsSetImplicitRules() {
    return Resource_ImplicitRules_DEFAULT
  }
return *p.ImplicitRules
}
var Resource_Language_DEFAULT string
func (p *Resource) GetLanguage() string {
  if !p.IsSetLanguage() {
    return Resource_Language_DEFAULT
  }
return *p.Language
}
var Resource_Meta_DEFAULT *Meta
func (p *Resource) GetMeta() *Meta {
  if !p.IsSetMeta() {
    return Resource_Meta_DEFAULT
  }
return p.Meta
}
func (p *Resource) IsSetID() bool {
  return p.ID != nil
}

func (p *Resource) IsSetExtension() bool {
  return p.Extension != nil
}

func (p *Resource) IsSetImplicitRules() bool {
  return p.ImplicitRules != nil
}

func (p *Resource) IsSetLanguage() bool {
  return p.Language != nil
}

func (p *Resource) IsSetMeta() bool {
  return p.Meta != nil
}

func (p *Resource) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    case -5:
      if err := p.ReadField_5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Resource)  ReadField_1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -1: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *Resource)  ReadField_2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.Extension =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &Extension{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.Extension = append(p.Extension, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Resource)  ReadField_3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -3: ", err)
} else {
  p.ImplicitRules = &v
}
  return nil
}

func (p *Resource)  ReadField_4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -4: ", err)
} else {
  p.Language = &v
}
  return nil
}

func (p *Resource)  ReadField_5(iprot thrift.TProtocol) error {
  p.Meta = &Meta{}
  if err := p.Meta.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Meta), err)
  }
  return nil
}

func (p *Resource) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Resource"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_5(oprot); err != nil { return err }
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Resource) writeField_5(oprot thrift.TProtocol) (err error) {
  if p.IsSetMeta() {
    if err := oprot.WriteFieldBegin("meta", thrift.STRUCT, -5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:meta: ", p), err) }
    if err := p.Meta.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Meta), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -5:meta: ", p), err) }
  }
  return err
}

func (p *Resource) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetLanguage() {
    if err := oprot.WriteFieldBegin("language", thrift.STRING, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:language: ", p), err) }
    if err := oprot.WriteString(string(*p.Language)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.language (-4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:language: ", p), err) }
  }
  return err
}

func (p *Resource) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetImplicitRules() {
    if err := oprot.WriteFieldBegin("implicitRules", thrift.STRING, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:implicitRules: ", p), err) }
    if err := oprot.WriteString(string(*p.ImplicitRules)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.implicitRules (-3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:implicitRules: ", p), err) }
  }
  return err
}

func (p *Resource) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtension() {
    if err := oprot.WriteFieldBegin("extension", thrift.LIST, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:extension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:extension: ", p), err) }
  }
  return err
}

func (p *Resource) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (-1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:id: ", p), err) }
  }
  return err
}

func (p *Resource) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Resource(%+v)", *p)
}

// Attributes:
//  - Extension
//  - Status
//  - Div
//  - ID
type Narrative struct {
  Extension []*Extension
  Status EnumNarrativeStatus
  Div string
  ID string
}

func NewNarrative() *Narrative {
  return &Narrative{}
}

var Narrative_Extension_DEFAULT []*Extension

func (p *Narrative) GetExtension() []*Extension {
  return p.Extension
}
var Narrative_Status_DEFAULT EnumNarrativeStatus
func (p *Narrative) GetStatus() EnumNarrativeStatus {
  if !p.IsSetStatus() {
    return Narrative_Status_DEFAULT
  }
return *p.Status
}
var Narrative_Div_DEFAULT string
func (p *Narrative) GetDiv() string {
  if !p.IsSetDiv() {
    return Narrative_Div_DEFAULT
  }
return *p.Div
}
var Narrative_ID_DEFAULT string
func (p *Narrative) GetID() string {
  if !p.IsSetID() {
    return Narrative_ID_DEFAULT
  }
return *p.ID
}
func (p *Narrative) IsSetExtension() bool {
  return p.Extension != nil
}

func (p *Narrative) IsSetStatus() bool {
  return p.Status != nil
}

func (p *Narrative) IsSetDiv() bool {
  return p.Div != nil
}

func (p *Narrative) IsSetID() bool {
  return p.ID != nil
}

func (p *Narrative) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Narrative)  ReadField_1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.Extension =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &Extension{}
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.Extension = append(p.Extension, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Narrative)  ReadField_2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -2: ", err)
} else {
  temp := EnumNarrativeStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *Narrative)  ReadField_3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -3: ", err)
} else {
  p.Div = &v
}
  return nil
}

func (p *Narrative)  ReadField_4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -4: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *Narrative) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Narrative"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Narrative) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (-4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:id: ", p), err) }
  }
  return err
}

func (p *Narrative) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDiv() {
    if err := oprot.WriteFieldBegin("div", thrift.STRING, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:div: ", p), err) }
    if err := oprot.WriteString(string(*p.Div)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.div (-3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:div: ", p), err) }
  }
  return err
}

func (p *Narrative) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (-2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:status: ", p), err) }
  }
  return err
}

func (p *Narrative) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtension() {
    if err := oprot.WriteFieldBegin("extension", thrift.LIST, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:extension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:extension: ", p), err) }
  }
  return err
}

func (p *Narrative) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Narrative(%+v)", *p)
}

// Attributes:
//  - ImplicitRules
//  - Language
//  - Meta
//  - Text
//  - ModifierExtension
//  - ID
//  - Extension
type DomainResource struct {
  ImplicitRules string
  Language string
  Meta *Meta
  Text *Narrative
  ModifierExtension []*Extension
  ID string
  Extension []*Extension
}

func NewDomainResource() *DomainResource {
  return &DomainResource{}
}

var DomainResource_ImplicitRules_DEFAULT string
func (p *DomainResource) GetImplicitRules() string {
  if !p.IsSetImplicitRules() {
    return DomainResource_ImplicitRules_DEFAULT
  }
return *p.ImplicitRules
}
var DomainResource_Language_DEFAULT string
func (p *DomainResource) GetLanguage() string {
  if !p.IsSetLanguage() {
    return DomainResource_Language_DEFAULT
  }
return *p.Language
}
var DomainResource_Meta_DEFAULT *Meta
func (p *DomainResource) GetMeta() *Meta {
  if !p.IsSetMeta() {
    return DomainResource_Meta_DEFAULT
  }
return p.Meta
}
var DomainResource_Text_DEFAULT *Narrative
func (p *DomainResource) GetText() *Narrative {
  if !p.IsSetText() {
    return DomainResource_Text_DEFAULT
  }
return p.Text
}
var DomainResource_ModifierExtension_DEFAULT []*Extension

func (p *DomainResource) GetModifierExtension() []*Extension {
  return p.ModifierExtension
}
var DomainResource_ID_DEFAULT string
func (p *DomainResource) GetID() string {
  if !p.IsSetID() {
    return DomainResource_ID_DEFAULT
  }
return *p.ID
}
var DomainResource_Extension_DEFAULT []*Extension

func (p *DomainResource) GetExtension() []*Extension {
  return p.Extension
}
func (p *DomainResource) IsSetImplicitRules() bool {
  return p.ImplicitRules != nil
}

func (p *DomainResource) IsSetLanguage() bool {
  return p.Language != nil
}

func (p *DomainResource) IsSetMeta() bool {
  return p.Meta != nil
}

func (p *DomainResource) IsSetText() bool {
  return p.Text != nil
}

func (p *DomainResource) IsSetModifierExtension() bool {
  return p.ModifierExtension != nil
}

func (p *DomainResource) IsSetID() bool {
  return p.ID != nil
}

func (p *DomainResource) IsSetExtension() bool {
  return p.Extension != nil
}

func (p *DomainResource) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    case -5:
      if err := p.ReadField_5(iprot); err != nil {
        return err
      }
    case -6:
      if err := p.ReadField_6(iprot); err != nil {
        return err
      }
    case -7:
      if err := p.ReadField_7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DomainResource)  ReadField_1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -1: ", err)
} else {
  p.ImplicitRules = &v
}
  return nil
}

func (p *DomainResource)  ReadField_2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -2: ", err)
} else {
  p.Language = &v
}
  return nil
}

func (p *DomainResource)  ReadField_3(iprot thrift.TProtocol) error {
  p.Meta = &Meta{}
  if err := p.Meta.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Meta), err)
  }
  return nil
}

func (p *DomainResource)  ReadField_4(iprot thrift.TProtocol) error {
  p.Text = &Narrative{}
  if err := p.Text.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Text), err)
  }
  return nil
}

func (p *DomainResource)  ReadField_5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.ModifierExtension =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &Extension{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.ModifierExtension = append(p.ModifierExtension, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DomainResource)  ReadField_6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -6: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *DomainResource)  ReadField_7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.Extension =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &Extension{}
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.Extension = append(p.Extension, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DomainResource) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DomainResource"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_7(oprot); err != nil { return err }
    if err := p.writeField_6(oprot); err != nil { return err }
    if err := p.writeField_5(oprot); err != nil { return err }
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DomainResource) writeField_7(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtension() {
    if err := oprot.WriteFieldBegin("extension", thrift.LIST, -7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -7:extension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -7:extension: ", p), err) }
  }
  return err
}

func (p *DomainResource) writeField_6(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, -6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -6:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (-6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -6:id: ", p), err) }
  }
  return err
}

func (p *DomainResource) writeField_5(oprot thrift.TProtocol) (err error) {
  if p.IsSetModifierExtension() {
    if err := oprot.WriteFieldBegin("modifierExtension", thrift.LIST, -5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:modifierExtension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ModifierExtension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ModifierExtension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -5:modifierExtension: ", p), err) }
  }
  return err
}

func (p *DomainResource) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetText() {
    if err := oprot.WriteFieldBegin("text", thrift.STRUCT, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:text: ", p), err) }
    if err := p.Text.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Text), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:text: ", p), err) }
  }
  return err
}

func (p *DomainResource) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMeta() {
    if err := oprot.WriteFieldBegin("meta", thrift.STRUCT, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:meta: ", p), err) }
    if err := p.Meta.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Meta), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:meta: ", p), err) }
  }
  return err
}

func (p *DomainResource) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetLanguage() {
    if err := oprot.WriteFieldBegin("language", thrift.STRING, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:language: ", p), err) }
    if err := oprot.WriteString(string(*p.Language)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.language (-2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:language: ", p), err) }
  }
  return err
}

func (p *DomainResource) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetImplicitRules() {
    if err := oprot.WriteFieldBegin("implicitRules", thrift.STRING, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:implicitRules: ", p), err) }
    if err := oprot.WriteString(string(*p.ImplicitRules)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.implicitRules (-1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:implicitRules: ", p), err) }
  }
  return err
}

func (p *DomainResource) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DomainResource(%+v)", *p)
}

// Attributes:
//  - PeriodId
//  - PeriodExtension
//  - PeriodStart
//  - PeriodEnd
type Period struct {
  PeriodId string
  PeriodExtension []*Extension
  PeriodStart string
  PeriodEnd string
}

func NewPeriod() *Period {
  return &Period{}
}

var Period_PeriodId_DEFAULT string
func (p *Period) GetPeriodId() string {
  if !p.IsSetPeriodId() {
    return Period_PeriodId_DEFAULT
  }
return *p.PeriodId
}
var Period_PeriodExtension_DEFAULT []*Extension

func (p *Period) GetPeriodExtension() []*Extension {
  return p.PeriodExtension
}
var Period_PeriodStart_DEFAULT string
func (p *Period) GetPeriodStart() string {
  if !p.IsSetPeriodStart() {
    return Period_PeriodStart_DEFAULT
  }
return *p.PeriodStart
}
var Period_PeriodEnd_DEFAULT string
func (p *Period) GetPeriodEnd() string {
  if !p.IsSetPeriodEnd() {
    return Period_PeriodEnd_DEFAULT
  }
return *p.PeriodEnd
}
func (p *Period) IsSetPeriodId() bool {
  return p.PeriodId != nil
}

func (p *Period) IsSetPeriodExtension() bool {
  return p.PeriodExtension != nil
}

func (p *Period) IsSetPeriodStart() bool {
  return p.PeriodStart != nil
}

func (p *Period) IsSetPeriodEnd() bool {
  return p.PeriodEnd != nil
}

func (p *Period) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Period)  ReadField_1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -1: ", err)
} else {
  p.PeriodId = &v
}
  return nil
}

func (p *Period)  ReadField_2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.PeriodExtension =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &Extension{}
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.PeriodExtension = append(p.PeriodExtension, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Period)  ReadField_3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -3: ", err)
} else {
  p.PeriodStart = &v
}
  return nil
}

func (p *Period)  ReadField_4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -4: ", err)
} else {
  p.PeriodEnd = &v
}
  return nil
}

func (p *Period) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Period"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Period) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPeriodEnd() {
    if err := oprot.WriteFieldBegin("PeriodEnd", thrift.STRING, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:PeriodEnd: ", p), err) }
    if err := oprot.WriteString(string(*p.PeriodEnd)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.PeriodEnd (-4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:PeriodEnd: ", p), err) }
  }
  return err
}

func (p *Period) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetPeriodStart() {
    if err := oprot.WriteFieldBegin("PeriodStart", thrift.STRING, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:PeriodStart: ", p), err) }
    if err := oprot.WriteString(string(*p.PeriodStart)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.PeriodStart (-3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:PeriodStart: ", p), err) }
  }
  return err
}

func (p *Period) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPeriodExtension() {
    if err := oprot.WriteFieldBegin("PeriodExtension", thrift.LIST, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:PeriodExtension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PeriodExtension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.PeriodExtension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:PeriodExtension: ", p), err) }
  }
  return err
}

func (p *Period) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPeriodId() {
    if err := oprot.WriteFieldBegin("PeriodId", thrift.STRING, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:PeriodId: ", p), err) }
    if err := oprot.WriteString(string(*p.PeriodId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.PeriodId (-1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:PeriodId: ", p), err) }
  }
  return err
}

func (p *Period) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Period(%+v)", *p)
}

// Attributes:
//  - ContactPointId
//  - ContactPointExtension
//  - ContactPointValue
//  - ContactPointPeriod
//  - ContactPointSystem
//  - ContactPointUse
type ContactPoint struct {
  ContactPointId string
  ContactPointExtension []*Extension
  ContactPointValue string
  ContactPointPeriod *Period
  ContactPointSystem EnumContactPointSystem
  ContactPointUse EnumContactPointUse
}

func NewContactPoint() *ContactPoint {
  return &ContactPoint{}
}

var ContactPoint_ContactPointId_DEFAULT string
func (p *ContactPoint) GetContactPointId() string {
  if !p.IsSetContactPointId() {
    return ContactPoint_ContactPointId_DEFAULT
  }
return *p.ContactPointId
}
var ContactPoint_ContactPointExtension_DEFAULT []*Extension

func (p *ContactPoint) GetContactPointExtension() []*Extension {
  return p.ContactPointExtension
}
var ContactPoint_ContactPointValue_DEFAULT string
func (p *ContactPoint) GetContactPointValue() string {
  if !p.IsSetContactPointValue() {
    return ContactPoint_ContactPointValue_DEFAULT
  }
return *p.ContactPointValue
}
var ContactPoint_ContactPointPeriod_DEFAULT *Period
func (p *ContactPoint) GetContactPointPeriod() *Period {
  if !p.IsSetContactPointPeriod() {
    return ContactPoint_ContactPointPeriod_DEFAULT
  }
return p.ContactPointPeriod
}
var ContactPoint_ContactPointSystem_DEFAULT EnumContactPointSystem
func (p *ContactPoint) GetContactPointSystem() EnumContactPointSystem {
  if !p.IsSetContactPointSystem() {
    return ContactPoint_ContactPointSystem_DEFAULT
  }
return *p.ContactPointSystem
}
var ContactPoint_ContactPointUse_DEFAULT EnumContactPointUse
func (p *ContactPoint) GetContactPointUse() EnumContactPointUse {
  if !p.IsSetContactPointUse() {
    return ContactPoint_ContactPointUse_DEFAULT
  }
return *p.ContactPointUse
}
func (p *ContactPoint) IsSetContactPointId() bool {
  return p.ContactPointId != nil
}

func (p *ContactPoint) IsSetContactPointExtension() bool {
  return p.ContactPointExtension != nil
}

func (p *ContactPoint) IsSetContactPointValue() bool {
  return p.ContactPointValue != nil
}

func (p *ContactPoint) IsSetContactPointPeriod() bool {
  return p.ContactPointPeriod != nil
}

func (p *ContactPoint) IsSetContactPointSystem() bool {
  return p.ContactPointSystem != nil
}

func (p *ContactPoint) IsSetContactPointUse() bool {
  return p.ContactPointUse != nil
}

func (p *ContactPoint) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    case -5:
      if err := p.ReadField_5(iprot); err != nil {
        return err
      }
    case -6:
      if err := p.ReadField_6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ContactPoint)  ReadField_1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -1: ", err)
} else {
  p.ContactPointId = &v
}
  return nil
}

func (p *ContactPoint)  ReadField_2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.ContactPointExtension =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &Extension{}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.ContactPointExtension = append(p.ContactPointExtension, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContactPoint)  ReadField_3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -3: ", err)
} else {
  p.ContactPointValue = &v
}
  return nil
}

func (p *ContactPoint)  ReadField_4(iprot thrift.TProtocol) error {
  p.ContactPointPeriod = &Period{}
  if err := p.ContactPointPeriod.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ContactPointPeriod), err)
  }
  return nil
}

func (p *ContactPoint)  ReadField_5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -5: ", err)
} else {
  temp := EnumContactPointSystem(v)
  p.ContactPointSystem = &temp
}
  return nil
}

func (p *ContactPoint)  ReadField_6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -6: ", err)
} else {
  temp := EnumContactPointUse(v)
  p.ContactPointUse = &temp
}
  return nil
}

func (p *ContactPoint) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ContactPoint"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_6(oprot); err != nil { return err }
    if err := p.writeField_5(oprot); err != nil { return err }
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ContactPoint) writeField_6(oprot thrift.TProtocol) (err error) {
  if p.IsSetContactPointUse() {
    if err := oprot.WriteFieldBegin("ContactPointUse", thrift.I32, -6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -6:ContactPointUse: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ContactPointUse)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ContactPointUse (-6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -6:ContactPointUse: ", p), err) }
  }
  return err
}

func (p *ContactPoint) writeField_5(oprot thrift.TProtocol) (err error) {
  if p.IsSetContactPointSystem() {
    if err := oprot.WriteFieldBegin("ContactPointSystem", thrift.I32, -5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:ContactPointSystem: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ContactPointSystem)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ContactPointSystem (-5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -5:ContactPointSystem: ", p), err) }
  }
  return err
}

func (p *ContactPoint) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetContactPointPeriod() {
    if err := oprot.WriteFieldBegin("ContactPointPeriod", thrift.STRUCT, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:ContactPointPeriod: ", p), err) }
    if err := p.ContactPointPeriod.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ContactPointPeriod), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:ContactPointPeriod: ", p), err) }
  }
  return err
}

func (p *ContactPoint) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetContactPointValue() {
    if err := oprot.WriteFieldBegin("ContactPointValue", thrift.STRING, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:ContactPointValue: ", p), err) }
    if err := oprot.WriteString(string(*p.ContactPointValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ContactPointValue (-3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:ContactPointValue: ", p), err) }
  }
  return err
}

func (p *ContactPoint) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetContactPointExtension() {
    if err := oprot.WriteFieldBegin("ContactPointExtension", thrift.LIST, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:ContactPointExtension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ContactPointExtension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ContactPointExtension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:ContactPointExtension: ", p), err) }
  }
  return err
}

func (p *ContactPoint) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetContactPointId() {
    if err := oprot.WriteFieldBegin("ContactPointId", thrift.STRING, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:ContactPointId: ", p), err) }
    if err := oprot.WriteString(string(*p.ContactPointId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ContactPointId (-1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:ContactPointId: ", p), err) }
  }
  return err
}

func (p *ContactPoint) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ContactPoint(%+v)", *p)
}

// Attributes:
//  - URL
//  - Hash
//  - Title
//  - ContentType
//  - Language
//  - ID
//  - Extension
//  - Creation
//  - Data
type Attachment struct {
  URL string
  Hash string
  Title string
  ContentType string
  Language string
  ID string
  Extension []*Extension
  Creation string
  Data string
}

func NewAttachment() *Attachment {
  return &Attachment{}
}

var Attachment_URL_DEFAULT string
func (p *Attachment) GetURL() string {
  if !p.IsSetURL() {
    return Attachment_URL_DEFAULT
  }
return *p.URL
}
var Attachment_Hash_DEFAULT string
func (p *Attachment) GetHash() string {
  if !p.IsSetHash() {
    return Attachment_Hash_DEFAULT
  }
return *p.Hash
}
var Attachment_Title_DEFAULT string
func (p *Attachment) GetTitle() string {
  if !p.IsSetTitle() {
    return Attachment_Title_DEFAULT
  }
return *p.Title
}
var Attachment_ContentType_DEFAULT string
func (p *Attachment) GetContentType() string {
  if !p.IsSetContentType() {
    return Attachment_ContentType_DEFAULT
  }
return *p.ContentType
}
var Attachment_Language_DEFAULT string
func (p *Attachment) GetLanguage() string {
  if !p.IsSetLanguage() {
    return Attachment_Language_DEFAULT
  }
return *p.Language
}
var Attachment_ID_DEFAULT string
func (p *Attachment) GetID() string {
  if !p.IsSetID() {
    return Attachment_ID_DEFAULT
  }
return *p.ID
}
var Attachment_Extension_DEFAULT []*Extension

func (p *Attachment) GetExtension() []*Extension {
  return p.Extension
}
var Attachment_Creation_DEFAULT string
func (p *Attachment) GetCreation() string {
  if !p.IsSetCreation() {
    return Attachment_Creation_DEFAULT
  }
return *p.Creation
}
var Attachment_Data_DEFAULT string
func (p *Attachment) GetData() string {
  if !p.IsSetData() {
    return Attachment_Data_DEFAULT
  }
return *p.Data
}
func (p *Attachment) IsSetURL() bool {
  return p.URL != nil
}

func (p *Attachment) IsSetHash() bool {
  return p.Hash != nil
}

func (p *Attachment) IsSetTitle() bool {
  return p.Title != nil
}

func (p *Attachment) IsSetContentType() bool {
  return p.ContentType != nil
}

func (p *Attachment) IsSetLanguage() bool {
  return p.Language != nil
}

func (p *Attachment) IsSetID() bool {
  return p.ID != nil
}

func (p *Attachment) IsSetExtension() bool {
  return p.Extension != nil
}

func (p *Attachment) IsSetCreation() bool {
  return p.Creation != nil
}

func (p *Attachment) IsSetData() bool {
  return p.Data != nil
}

func (p *Attachment) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    case -5:
      if err := p.ReadField_5(iprot); err != nil {
        return err
      }
    case -6:
      if err := p.ReadField_6(iprot); err != nil {
        return err
      }
    case -7:
      if err := p.ReadField_7(iprot); err != nil {
        return err
      }
    case -8:
      if err := p.ReadField_8(iprot); err != nil {
        return err
      }
    case -9:
      if err := p.ReadField_9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Attachment)  ReadField_1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -1: ", err)
} else {
  p.URL = &v
}
  return nil
}

func (p *Attachment)  ReadField_2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -2: ", err)
} else {
  p.Hash = &v
}
  return nil
}

func (p *Attachment)  ReadField_3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -3: ", err)
} else {
  p.Title = &v
}
  return nil
}

func (p *Attachment)  ReadField_4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -4: ", err)
} else {
  p.ContentType = &v
}
  return nil
}

func (p *Attachment)  ReadField_5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -5: ", err)
} else {
  p.Language = &v
}
  return nil
}

func (p *Attachment)  ReadField_6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -6: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *Attachment)  ReadField_7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.Extension =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &Extension{}
    if err := _elem12.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.Extension = append(p.Extension, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Attachment)  ReadField_8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -8: ", err)
} else {
  p.Creation = &v
}
  return nil
}

func (p *Attachment)  ReadField_9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -9: ", err)
} else {
  p.Data = &v
}
  return nil
}

func (p *Attachment) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Attachment"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_9(oprot); err != nil { return err }
    if err := p.writeField_8(oprot); err != nil { return err }
    if err := p.writeField_7(oprot); err != nil { return err }
    if err := p.writeField_6(oprot); err != nil { return err }
    if err := p.writeField_5(oprot); err != nil { return err }
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Attachment) writeField_9(oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.STRING, -9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -9:data: ", p), err) }
    if err := oprot.WriteString(string(*p.Data)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.data (-9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -9:data: ", p), err) }
  }
  return err
}

func (p *Attachment) writeField_8(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreation() {
    if err := oprot.WriteFieldBegin("creation", thrift.STRING, -8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -8:creation: ", p), err) }
    if err := oprot.WriteString(string(*p.Creation)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creation (-8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -8:creation: ", p), err) }
  }
  return err
}

func (p *Attachment) writeField_7(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtension() {
    if err := oprot.WriteFieldBegin("extension", thrift.LIST, -7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -7:extension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -7:extension: ", p), err) }
  }
  return err
}

func (p *Attachment) writeField_6(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, -6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -6:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (-6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -6:id: ", p), err) }
  }
  return err
}

func (p *Attachment) writeField_5(oprot thrift.TProtocol) (err error) {
  if p.IsSetLanguage() {
    if err := oprot.WriteFieldBegin("language", thrift.STRING, -5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:language: ", p), err) }
    if err := oprot.WriteString(string(*p.Language)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.language (-5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -5:language: ", p), err) }
  }
  return err
}

func (p *Attachment) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetContentType() {
    if err := oprot.WriteFieldBegin("contentType", thrift.STRING, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:contentType: ", p), err) }
    if err := oprot.WriteString(string(*p.ContentType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.contentType (-4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:contentType: ", p), err) }
  }
  return err
}

func (p *Attachment) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTitle() {
    if err := oprot.WriteFieldBegin("title", thrift.STRING, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:title: ", p), err) }
    if err := oprot.WriteString(string(*p.Title)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.title (-3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:title: ", p), err) }
  }
  return err
}

func (p *Attachment) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetHash() {
    if err := oprot.WriteFieldBegin("hash", thrift.STRING, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:hash: ", p), err) }
    if err := oprot.WriteString(string(*p.Hash)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hash (-2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:hash: ", p), err) }
  }
  return err
}

func (p *Attachment) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetURL() {
    if err := oprot.WriteFieldBegin("url", thrift.STRING, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:url: ", p), err) }
    if err := oprot.WriteString(string(*p.URL)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.url (-1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:url: ", p), err) }
  }
  return err
}

func (p *Attachment) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Attachment(%+v)", *p)
}

// Attributes:
//  - AddressLine
//  - AddressCity
//  - AddressUse
//  - AddressText
//  - AddressId
//  - AddressPostalCode
//  - AddressPeriod
//  - AddressType
//  - AddressState
//  - AddressCountry
//  - AddressExtension
//  - AddressDistrict
type Address struct {
  AddressLine []string
  AddressCity string
  AddressUse EnumAddressUse
  AddressText string
  AddressId string
  AddressPostalCode string
  AddressPeriod *Period
  AddressType EnumAddressType
  AddressState string
  AddressCountry string
  AddressExtension []*Extension
  AddressDistrict string
}

func NewAddress() *Address {
  return &Address{}
}

var Address_AddressLine_DEFAULT []string

func (p *Address) GetAddressLine() []string {
  return p.AddressLine
}
var Address_AddressCity_DEFAULT string
func (p *Address) GetAddressCity() string {
  if !p.IsSetAddressCity() {
    return Address_AddressCity_DEFAULT
  }
return *p.AddressCity
}
var Address_AddressUse_DEFAULT EnumAddressUse
func (p *Address) GetAddressUse() EnumAddressUse {
  if !p.IsSetAddressUse() {
    return Address_AddressUse_DEFAULT
  }
return *p.AddressUse
}
var Address_AddressText_DEFAULT string
func (p *Address) GetAddressText() string {
  if !p.IsSetAddressText() {
    return Address_AddressText_DEFAULT
  }
return *p.AddressText
}
var Address_AddressId_DEFAULT string
func (p *Address) GetAddressId() string {
  if !p.IsSetAddressId() {
    return Address_AddressId_DEFAULT
  }
return *p.AddressId
}
var Address_AddressPostalCode_DEFAULT string
func (p *Address) GetAddressPostalCode() string {
  if !p.IsSetAddressPostalCode() {
    return Address_AddressPostalCode_DEFAULT
  }
return *p.AddressPostalCode
}
var Address_AddressPeriod_DEFAULT *Period
func (p *Address) GetAddressPeriod() *Period {
  if !p.IsSetAddressPeriod() {
    return Address_AddressPeriod_DEFAULT
  }
return p.AddressPeriod
}
var Address_AddressType_DEFAULT EnumAddressType
func (p *Address) GetAddressType() EnumAddressType {
  if !p.IsSetAddressType() {
    return Address_AddressType_DEFAULT
  }
return *p.AddressType
}
var Address_AddressState_DEFAULT string
func (p *Address) GetAddressState() string {
  if !p.IsSetAddressState() {
    return Address_AddressState_DEFAULT
  }
return *p.AddressState
}
var Address_AddressCountry_DEFAULT string
func (p *Address) GetAddressCountry() string {
  if !p.IsSetAddressCountry() {
    return Address_AddressCountry_DEFAULT
  }
return *p.AddressCountry
}
var Address_AddressExtension_DEFAULT []*Extension

func (p *Address) GetAddressExtension() []*Extension {
  return p.AddressExtension
}
var Address_AddressDistrict_DEFAULT string
func (p *Address) GetAddressDistrict() string {
  if !p.IsSetAddressDistrict() {
    return Address_AddressDistrict_DEFAULT
  }
return *p.AddressDistrict
}
func (p *Address) IsSetAddressLine() bool {
  return p.AddressLine != nil
}

func (p *Address) IsSetAddressCity() bool {
  return p.AddressCity != nil
}

func (p *Address) IsSetAddressUse() bool {
  return p.AddressUse != nil
}

func (p *Address) IsSetAddressText() bool {
  return p.AddressText != nil
}

func (p *Address) IsSetAddressId() bool {
  return p.AddressId != nil
}

func (p *Address) IsSetAddressPostalCode() bool {
  return p.AddressPostalCode != nil
}

func (p *Address) IsSetAddressPeriod() bool {
  return p.AddressPeriod != nil
}

func (p *Address) IsSetAddressType() bool {
  return p.AddressType != nil
}

func (p *Address) IsSetAddressState() bool {
  return p.AddressState != nil
}

func (p *Address) IsSetAddressCountry() bool {
  return p.AddressCountry != nil
}

func (p *Address) IsSetAddressExtension() bool {
  return p.AddressExtension != nil
}

func (p *Address) IsSetAddressDistrict() bool {
  return p.AddressDistrict != nil
}

func (p *Address) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    case -5:
      if err := p.ReadField_5(iprot); err != nil {
        return err
      }
    case -6:
      if err := p.ReadField_6(iprot); err != nil {
        return err
      }
    case -7:
      if err := p.ReadField_7(iprot); err != nil {
        return err
      }
    case -8:
      if err := p.ReadField_8(iprot); err != nil {
        return err
      }
    case -9:
      if err := p.ReadField_9(iprot); err != nil {
        return err
      }
    case -10:
      if err := p.ReadField_10(iprot); err != nil {
        return err
      }
    case -11:
      if err := p.ReadField_11(iprot); err != nil {
        return err
      }
    case -12:
      if err := p.ReadField_12(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Address)  ReadField_1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.AddressLine =  tSlice
  for i := 0; i < size; i ++ {
var _elem13 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem13 = v
}
    p.AddressLine = append(p.AddressLine, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Address)  ReadField_2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -2: ", err)
} else {
  p.AddressCity = &v
}
  return nil
}

func (p *Address)  ReadField_3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -3: ", err)
} else {
  temp := EnumAddressUse(v)
  p.AddressUse = &temp
}
  return nil
}

func (p *Address)  ReadField_4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -4: ", err)
} else {
  p.AddressText = &v
}
  return nil
}

func (p *Address)  ReadField_5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -5: ", err)
} else {
  p.AddressId = &v
}
  return nil
}

func (p *Address)  ReadField_6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -6: ", err)
} else {
  p.AddressPostalCode = &v
}
  return nil
}

func (p *Address)  ReadField_7(iprot thrift.TProtocol) error {
  p.AddressPeriod = &Period{}
  if err := p.AddressPeriod.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AddressPeriod), err)
  }
  return nil
}

func (p *Address)  ReadField_8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -8: ", err)
} else {
  temp := EnumAddressType(v)
  p.AddressType = &temp
}
  return nil
}

func (p *Address)  ReadField_9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -9: ", err)
} else {
  p.AddressState = &v
}
  return nil
}

func (p *Address)  ReadField_10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -10: ", err)
} else {
  p.AddressCountry = &v
}
  return nil
}

func (p *Address)  ReadField_11(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.AddressExtension =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &Extension{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.AddressExtension = append(p.AddressExtension, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Address)  ReadField_12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -12: ", err)
} else {
  p.AddressDistrict = &v
}
  return nil
}

func (p *Address) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Address"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_12(oprot); err != nil { return err }
    if err := p.writeField_11(oprot); err != nil { return err }
    if err := p.writeField_10(oprot); err != nil { return err }
    if err := p.writeField_9(oprot); err != nil { return err }
    if err := p.writeField_8(oprot); err != nil { return err }
    if err := p.writeField_7(oprot); err != nil { return err }
    if err := p.writeField_6(oprot); err != nil { return err }
    if err := p.writeField_5(oprot); err != nil { return err }
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Address) writeField_12(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddressDistrict() {
    if err := oprot.WriteFieldBegin("AddressDistrict", thrift.STRING, -12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -12:AddressDistrict: ", p), err) }
    if err := oprot.WriteString(string(*p.AddressDistrict)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AddressDistrict (-12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -12:AddressDistrict: ", p), err) }
  }
  return err
}

func (p *Address) writeField_11(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddressExtension() {
    if err := oprot.WriteFieldBegin("AddressExtension", thrift.LIST, -11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -11:AddressExtension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AddressExtension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.AddressExtension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -11:AddressExtension: ", p), err) }
  }
  return err
}

func (p *Address) writeField_10(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddressCountry() {
    if err := oprot.WriteFieldBegin("AddressCountry", thrift.STRING, -10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -10:AddressCountry: ", p), err) }
    if err := oprot.WriteString(string(*p.AddressCountry)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AddressCountry (-10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -10:AddressCountry: ", p), err) }
  }
  return err
}

func (p *Address) writeField_9(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddressState() {
    if err := oprot.WriteFieldBegin("AddressState", thrift.STRING, -9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -9:AddressState: ", p), err) }
    if err := oprot.WriteString(string(*p.AddressState)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AddressState (-9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -9:AddressState: ", p), err) }
  }
  return err
}

func (p *Address) writeField_8(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddressType() {
    if err := oprot.WriteFieldBegin("AddressType", thrift.I32, -8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -8:AddressType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.AddressType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AddressType (-8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -8:AddressType: ", p), err) }
  }
  return err
}

func (p *Address) writeField_7(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddressPeriod() {
    if err := oprot.WriteFieldBegin("AddressPeriod", thrift.STRUCT, -7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -7:AddressPeriod: ", p), err) }
    if err := p.AddressPeriod.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AddressPeriod), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -7:AddressPeriod: ", p), err) }
  }
  return err
}

func (p *Address) writeField_6(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddressPostalCode() {
    if err := oprot.WriteFieldBegin("AddressPostalCode", thrift.STRING, -6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -6:AddressPostalCode: ", p), err) }
    if err := oprot.WriteString(string(*p.AddressPostalCode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AddressPostalCode (-6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -6:AddressPostalCode: ", p), err) }
  }
  return err
}

func (p *Address) writeField_5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddressId() {
    if err := oprot.WriteFieldBegin("AddressId", thrift.STRING, -5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:AddressId: ", p), err) }
    if err := oprot.WriteString(string(*p.AddressId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AddressId (-5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -5:AddressId: ", p), err) }
  }
  return err
}

func (p *Address) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddressText() {
    if err := oprot.WriteFieldBegin("AddressText", thrift.STRING, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:AddressText: ", p), err) }
    if err := oprot.WriteString(string(*p.AddressText)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AddressText (-4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:AddressText: ", p), err) }
  }
  return err
}

func (p *Address) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddressUse() {
    if err := oprot.WriteFieldBegin("AddressUse", thrift.I32, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:AddressUse: ", p), err) }
    if err := oprot.WriteI32(int32(*p.AddressUse)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AddressUse (-3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:AddressUse: ", p), err) }
  }
  return err
}

func (p *Address) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddressCity() {
    if err := oprot.WriteFieldBegin("AddressCity", thrift.STRING, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:AddressCity: ", p), err) }
    if err := oprot.WriteString(string(*p.AddressCity)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.AddressCity (-2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:AddressCity: ", p), err) }
  }
  return err
}

func (p *Address) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddressLine() {
    if err := oprot.WriteFieldBegin("AddressLine", thrift.LIST, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:AddressLine: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.AddressLine)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.AddressLine {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:AddressLine: ", p), err) }
  }
  return err
}

func (p *Address) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Address(%+v)", *p)
}

// Attributes:
//  - ID
//  - Extension
//  - ModifierExtension
type BackboneElement struct {
  ID string
  Extension []*Extension
  ModifierExtension []*Extension
}

func NewBackboneElement() *BackboneElement {
  return &BackboneElement{}
}

var BackboneElement_ID_DEFAULT string
func (p *BackboneElement) GetID() string {
  if !p.IsSetID() {
    return BackboneElement_ID_DEFAULT
  }
return *p.ID
}
var BackboneElement_Extension_DEFAULT []*Extension

func (p *BackboneElement) GetExtension() []*Extension {
  return p.Extension
}
var BackboneElement_ModifierExtension_DEFAULT []*Extension

func (p *BackboneElement) GetModifierExtension() []*Extension {
  return p.ModifierExtension
}
func (p *BackboneElement) IsSetID() bool {
  return p.ID != nil
}

func (p *BackboneElement) IsSetExtension() bool {
  return p.Extension != nil
}

func (p *BackboneElement) IsSetModifierExtension() bool {
  return p.ModifierExtension != nil
}

func (p *BackboneElement) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BackboneElement)  ReadField_1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -1: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *BackboneElement)  ReadField_2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.Extension =  tSlice
  for i := 0; i < size; i ++ {
    _elem15 := &Extension{}
    if err := _elem15.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
    }
    p.Extension = append(p.Extension, _elem15)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BackboneElement)  ReadField_3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.ModifierExtension =  tSlice
  for i := 0; i < size; i ++ {
    _elem16 := &Extension{}
    if err := _elem16.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
    }
    p.ModifierExtension = append(p.ModifierExtension, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BackboneElement) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BackboneElement"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BackboneElement) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetModifierExtension() {
    if err := oprot.WriteFieldBegin("modifierExtension", thrift.LIST, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:modifierExtension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ModifierExtension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ModifierExtension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:modifierExtension: ", p), err) }
  }
  return err
}

func (p *BackboneElement) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtension() {
    if err := oprot.WriteFieldBegin("extension", thrift.LIST, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:extension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:extension: ", p), err) }
  }
  return err
}

func (p *BackboneElement) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (-1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:id: ", p), err) }
  }
  return err
}

func (p *BackboneElement) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BackboneElement(%+v)", *p)
}

// Attributes:
//  - ID
//  - Extension
//  - Coding
//  - Text
type CodeableConcept struct {
  ID string
  Extension []*Extension
  Coding []*Coding
  Text string
}

func NewCodeableConcept() *CodeableConcept {
  return &CodeableConcept{}
}

var CodeableConcept_ID_DEFAULT string
func (p *CodeableConcept) GetID() string {
  if !p.IsSetID() {
    return CodeableConcept_ID_DEFAULT
  }
return *p.ID
}
var CodeableConcept_Extension_DEFAULT []*Extension

func (p *CodeableConcept) GetExtension() []*Extension {
  return p.Extension
}
var CodeableConcept_Coding_DEFAULT []*Coding

func (p *CodeableConcept) GetCoding() []*Coding {
  return p.Coding
}
var CodeableConcept_Text_DEFAULT string
func (p *CodeableConcept) GetText() string {
  if !p.IsSetText() {
    return CodeableConcept_Text_DEFAULT
  }
return *p.Text
}
func (p *CodeableConcept) IsSetID() bool {
  return p.ID != nil
}

func (p *CodeableConcept) IsSetExtension() bool {
  return p.Extension != nil
}

func (p *CodeableConcept) IsSetCoding() bool {
  return p.Coding != nil
}

func (p *CodeableConcept) IsSetText() bool {
  return p.Text != nil
}

func (p *CodeableConcept) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CodeableConcept)  ReadField_1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -1: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *CodeableConcept)  ReadField_2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.Extension =  tSlice
  for i := 0; i < size; i ++ {
    _elem17 := &Extension{}
    if err := _elem17.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
    }
    p.Extension = append(p.Extension, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CodeableConcept)  ReadField_3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Coding, 0, size)
  p.Coding =  tSlice
  for i := 0; i < size; i ++ {
    _elem18 := &Coding{}
    if err := _elem18.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
    }
    p.Coding = append(p.Coding, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CodeableConcept)  ReadField_4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -4: ", err)
} else {
  p.Text = &v
}
  return nil
}

func (p *CodeableConcept) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CodeableConcept"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CodeableConcept) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetText() {
    if err := oprot.WriteFieldBegin("text", thrift.STRING, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:text: ", p), err) }
    if err := oprot.WriteString(string(*p.Text)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.text (-4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:text: ", p), err) }
  }
  return err
}

func (p *CodeableConcept) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetCoding() {
    if err := oprot.WriteFieldBegin("coding", thrift.LIST, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:coding: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Coding)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Coding {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:coding: ", p), err) }
  }
  return err
}

func (p *CodeableConcept) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtension() {
    if err := oprot.WriteFieldBegin("extension", thrift.LIST, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:extension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:extension: ", p), err) }
  }
  return err
}

func (p *CodeableConcept) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (-1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:id: ", p), err) }
  }
  return err
}

func (p *CodeableConcept) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CodeableConcept(%+v)", *p)
}

// Attributes:
//  - HumanNamePrefix
//  - HumanNameSuffix
//  - HumanNamePeriod
//  - HumanNameUse
//  - HumanNameText
//  - HumanNameId
//  - HumanNameExtension
//  - HumanNameFamily
//  - HumanNameGiven
type HumanName struct {
  HumanNamePrefix []string
  HumanNameSuffix []string
  HumanNamePeriod *Period
  HumanNameUse EnumHumanNameUse
  HumanNameText string
  HumanNameId string
  HumanNameExtension []*Extension
  HumanNameFamily string
  HumanNameGiven []string
}

func NewHumanName() *HumanName {
  return &HumanName{}
}

var HumanName_HumanNamePrefix_DEFAULT []string

func (p *HumanName) GetHumanNamePrefix() []string {
  return p.HumanNamePrefix
}
var HumanName_HumanNameSuffix_DEFAULT []string

func (p *HumanName) GetHumanNameSuffix() []string {
  return p.HumanNameSuffix
}
var HumanName_HumanNamePeriod_DEFAULT *Period
func (p *HumanName) GetHumanNamePeriod() *Period {
  if !p.IsSetHumanNamePeriod() {
    return HumanName_HumanNamePeriod_DEFAULT
  }
return p.HumanNamePeriod
}
var HumanName_HumanNameUse_DEFAULT EnumHumanNameUse
func (p *HumanName) GetHumanNameUse() EnumHumanNameUse {
  if !p.IsSetHumanNameUse() {
    return HumanName_HumanNameUse_DEFAULT
  }
return *p.HumanNameUse
}
var HumanName_HumanNameText_DEFAULT string
func (p *HumanName) GetHumanNameText() string {
  if !p.IsSetHumanNameText() {
    return HumanName_HumanNameText_DEFAULT
  }
return *p.HumanNameText
}
var HumanName_HumanNameId_DEFAULT string
func (p *HumanName) GetHumanNameId() string {
  if !p.IsSetHumanNameId() {
    return HumanName_HumanNameId_DEFAULT
  }
return *p.HumanNameId
}
var HumanName_HumanNameExtension_DEFAULT []*Extension

func (p *HumanName) GetHumanNameExtension() []*Extension {
  return p.HumanNameExtension
}
var HumanName_HumanNameFamily_DEFAULT string
func (p *HumanName) GetHumanNameFamily() string {
  if !p.IsSetHumanNameFamily() {
    return HumanName_HumanNameFamily_DEFAULT
  }
return *p.HumanNameFamily
}
var HumanName_HumanNameGiven_DEFAULT []string

func (p *HumanName) GetHumanNameGiven() []string {
  return p.HumanNameGiven
}
func (p *HumanName) IsSetHumanNamePrefix() bool {
  return p.HumanNamePrefix != nil
}

func (p *HumanName) IsSetHumanNameSuffix() bool {
  return p.HumanNameSuffix != nil
}

func (p *HumanName) IsSetHumanNamePeriod() bool {
  return p.HumanNamePeriod != nil
}

func (p *HumanName) IsSetHumanNameUse() bool {
  return p.HumanNameUse != nil
}

func (p *HumanName) IsSetHumanNameText() bool {
  return p.HumanNameText != nil
}

func (p *HumanName) IsSetHumanNameId() bool {
  return p.HumanNameId != nil
}

func (p *HumanName) IsSetHumanNameExtension() bool {
  return p.HumanNameExtension != nil
}

func (p *HumanName) IsSetHumanNameFamily() bool {
  return p.HumanNameFamily != nil
}

func (p *HumanName) IsSetHumanNameGiven() bool {
  return p.HumanNameGiven != nil
}

func (p *HumanName) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    case -5:
      if err := p.ReadField_5(iprot); err != nil {
        return err
      }
    case -6:
      if err := p.ReadField_6(iprot); err != nil {
        return err
      }
    case -7:
      if err := p.ReadField_7(iprot); err != nil {
        return err
      }
    case -8:
      if err := p.ReadField_8(iprot); err != nil {
        return err
      }
    case -9:
      if err := p.ReadField_9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HumanName)  ReadField_1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.HumanNamePrefix =  tSlice
  for i := 0; i < size; i ++ {
var _elem19 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem19 = v
}
    p.HumanNamePrefix = append(p.HumanNamePrefix, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HumanName)  ReadField_2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.HumanNameSuffix =  tSlice
  for i := 0; i < size; i ++ {
var _elem20 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem20 = v
}
    p.HumanNameSuffix = append(p.HumanNameSuffix, _elem20)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HumanName)  ReadField_3(iprot thrift.TProtocol) error {
  p.HumanNamePeriod = &Period{}
  if err := p.HumanNamePeriod.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HumanNamePeriod), err)
  }
  return nil
}

func (p *HumanName)  ReadField_4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -4: ", err)
} else {
  temp := EnumHumanNameUse(v)
  p.HumanNameUse = &temp
}
  return nil
}

func (p *HumanName)  ReadField_5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -5: ", err)
} else {
  p.HumanNameText = &v
}
  return nil
}

func (p *HumanName)  ReadField_6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -6: ", err)
} else {
  p.HumanNameId = &v
}
  return nil
}

func (p *HumanName)  ReadField_7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.HumanNameExtension =  tSlice
  for i := 0; i < size; i ++ {
    _elem21 := &Extension{}
    if err := _elem21.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
    }
    p.HumanNameExtension = append(p.HumanNameExtension, _elem21)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HumanName)  ReadField_8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -8: ", err)
} else {
  p.HumanNameFamily = &v
}
  return nil
}

func (p *HumanName)  ReadField_9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.HumanNameGiven =  tSlice
  for i := 0; i < size; i ++ {
var _elem22 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem22 = v
}
    p.HumanNameGiven = append(p.HumanNameGiven, _elem22)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HumanName) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HumanName"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_9(oprot); err != nil { return err }
    if err := p.writeField_8(oprot); err != nil { return err }
    if err := p.writeField_7(oprot); err != nil { return err }
    if err := p.writeField_6(oprot); err != nil { return err }
    if err := p.writeField_5(oprot); err != nil { return err }
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HumanName) writeField_9(oprot thrift.TProtocol) (err error) {
  if p.IsSetHumanNameGiven() {
    if err := oprot.WriteFieldBegin("HumanNameGiven", thrift.LIST, -9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -9:HumanNameGiven: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.HumanNameGiven)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.HumanNameGiven {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -9:HumanNameGiven: ", p), err) }
  }
  return err
}

func (p *HumanName) writeField_8(oprot thrift.TProtocol) (err error) {
  if p.IsSetHumanNameFamily() {
    if err := oprot.WriteFieldBegin("HumanNameFamily", thrift.STRING, -8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -8:HumanNameFamily: ", p), err) }
    if err := oprot.WriteString(string(*p.HumanNameFamily)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.HumanNameFamily (-8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -8:HumanNameFamily: ", p), err) }
  }
  return err
}

func (p *HumanName) writeField_7(oprot thrift.TProtocol) (err error) {
  if p.IsSetHumanNameExtension() {
    if err := oprot.WriteFieldBegin("HumanNameExtension", thrift.LIST, -7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -7:HumanNameExtension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HumanNameExtension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.HumanNameExtension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -7:HumanNameExtension: ", p), err) }
  }
  return err
}

func (p *HumanName) writeField_6(oprot thrift.TProtocol) (err error) {
  if p.IsSetHumanNameId() {
    if err := oprot.WriteFieldBegin("HumanNameId", thrift.STRING, -6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -6:HumanNameId: ", p), err) }
    if err := oprot.WriteString(string(*p.HumanNameId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.HumanNameId (-6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -6:HumanNameId: ", p), err) }
  }
  return err
}

func (p *HumanName) writeField_5(oprot thrift.TProtocol) (err error) {
  if p.IsSetHumanNameText() {
    if err := oprot.WriteFieldBegin("HumanNameText", thrift.STRING, -5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:HumanNameText: ", p), err) }
    if err := oprot.WriteString(string(*p.HumanNameText)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.HumanNameText (-5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -5:HumanNameText: ", p), err) }
  }
  return err
}

func (p *HumanName) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetHumanNameUse() {
    if err := oprot.WriteFieldBegin("HumanNameUse", thrift.I32, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:HumanNameUse: ", p), err) }
    if err := oprot.WriteI32(int32(*p.HumanNameUse)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.HumanNameUse (-4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:HumanNameUse: ", p), err) }
  }
  return err
}

func (p *HumanName) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetHumanNamePeriod() {
    if err := oprot.WriteFieldBegin("HumanNamePeriod", thrift.STRUCT, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:HumanNamePeriod: ", p), err) }
    if err := p.HumanNamePeriod.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HumanNamePeriod), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:HumanNamePeriod: ", p), err) }
  }
  return err
}

func (p *HumanName) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetHumanNameSuffix() {
    if err := oprot.WriteFieldBegin("HumanNameSuffix", thrift.LIST, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:HumanNameSuffix: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.HumanNameSuffix)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.HumanNameSuffix {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:HumanNameSuffix: ", p), err) }
  }
  return err
}

func (p *HumanName) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetHumanNamePrefix() {
    if err := oprot.WriteFieldBegin("HumanNamePrefix", thrift.LIST, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:HumanNamePrefix: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.HumanNamePrefix)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.HumanNamePrefix {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:HumanNamePrefix: ", p), err) }
  }
  return err
}

func (p *HumanName) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HumanName(%+v)", *p)
}

// Attributes:
//  - Reference
//  - Display
//  - ID
//  - Extension
type Reference struct {
  Reference string
  Display string
  ID string
  Extension []*Extension
}

func NewReference() *Reference {
  return &Reference{}
}

var Reference_Reference_DEFAULT string
func (p *Reference) GetReference() string {
  if !p.IsSetReference() {
    return Reference_Reference_DEFAULT
  }
return *p.Reference
}
var Reference_Display_DEFAULT string
func (p *Reference) GetDisplay() string {
  if !p.IsSetDisplay() {
    return Reference_Display_DEFAULT
  }
return *p.Display
}
var Reference_ID_DEFAULT string
func (p *Reference) GetID() string {
  if !p.IsSetID() {
    return Reference_ID_DEFAULT
  }
return *p.ID
}
var Reference_Extension_DEFAULT []*Extension

func (p *Reference) GetExtension() []*Extension {
  return p.Extension
}
func (p *Reference) IsSetReference() bool {
  return p.Reference != nil
}

func (p *Reference) IsSetDisplay() bool {
  return p.Display != nil
}

func (p *Reference) IsSetID() bool {
  return p.ID != nil
}

func (p *Reference) IsSetExtension() bool {
  return p.Extension != nil
}

func (p *Reference) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Reference)  ReadField_1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -1: ", err)
} else {
  p.Reference = &v
}
  return nil
}

func (p *Reference)  ReadField_2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -2: ", err)
} else {
  p.Display = &v
}
  return nil
}

func (p *Reference)  ReadField_3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -3: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *Reference)  ReadField_4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.Extension =  tSlice
  for i := 0; i < size; i ++ {
    _elem23 := &Extension{}
    if err := _elem23.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
    }
    p.Extension = append(p.Extension, _elem23)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Reference) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Reference"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Reference) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtension() {
    if err := oprot.WriteFieldBegin("extension", thrift.LIST, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:extension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:extension: ", p), err) }
  }
  return err
}

func (p *Reference) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (-3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:id: ", p), err) }
  }
  return err
}

func (p *Reference) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDisplay() {
    if err := oprot.WriteFieldBegin("display", thrift.STRING, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:display: ", p), err) }
    if err := oprot.WriteString(string(*p.Display)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.display (-2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:display: ", p), err) }
  }
  return err
}

func (p *Reference) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetReference() {
    if err := oprot.WriteFieldBegin("reference", thrift.STRING, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:reference: ", p), err) }
    if err := oprot.WriteString(string(*p.Reference)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reference (-1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:reference: ", p), err) }
  }
  return err
}

func (p *Reference) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Reference(%+v)", *p)
}

// Attributes:
//  - Telecom
//  - Period
//  - ID
//  - Extension
//  - Relationship
//  - Name
//  - ModifierExtension
//  - Address
//  - Gender
//  - Organization
type Patient_Contact struct {
  Telecom []*ContactPoint
  Period *Period
  ID string
  Extension []*Extension
  Relationship []*CodeableConcept
  Name *HumanName
  ModifierExtension []*Extension
  Address *Address
  Gender EnumPatientContactGender
  Organization *Reference
}

func NewPatient_Contact() *Patient_Contact {
  return &Patient_Contact{}
}

var Patient_Contact_Telecom_DEFAULT []*ContactPoint

func (p *Patient_Contact) GetTelecom() []*ContactPoint {
  return p.Telecom
}
var Patient_Contact_Period_DEFAULT *Period
func (p *Patient_Contact) GetPeriod() *Period {
  if !p.IsSetPeriod() {
    return Patient_Contact_Period_DEFAULT
  }
return p.Period
}
var Patient_Contact_ID_DEFAULT string
func (p *Patient_Contact) GetID() string {
  if !p.IsSetID() {
    return Patient_Contact_ID_DEFAULT
  }
return *p.ID
}
var Patient_Contact_Extension_DEFAULT []*Extension

func (p *Patient_Contact) GetExtension() []*Extension {
  return p.Extension
}
var Patient_Contact_Relationship_DEFAULT []*CodeableConcept

func (p *Patient_Contact) GetRelationship() []*CodeableConcept {
  return p.Relationship
}
var Patient_Contact_Name_DEFAULT *HumanName
func (p *Patient_Contact) GetName() *HumanName {
  if !p.IsSetName() {
    return Patient_Contact_Name_DEFAULT
  }
return p.Name
}
var Patient_Contact_ModifierExtension_DEFAULT []*Extension

func (p *Patient_Contact) GetModifierExtension() []*Extension {
  return p.ModifierExtension
}
var Patient_Contact_Address_DEFAULT *Address
func (p *Patient_Contact) GetAddress() *Address {
  if !p.IsSetAddress() {
    return Patient_Contact_Address_DEFAULT
  }
return p.Address
}
var Patient_Contact_Gender_DEFAULT EnumPatientContactGender
func (p *Patient_Contact) GetGender() EnumPatientContactGender {
  if !p.IsSetGender() {
    return Patient_Contact_Gender_DEFAULT
  }
return *p.Gender
}
var Patient_Contact_Organization_DEFAULT *Reference
func (p *Patient_Contact) GetOrganization() *Reference {
  if !p.IsSetOrganization() {
    return Patient_Contact_Organization_DEFAULT
  }
return p.Organization
}
func (p *Patient_Contact) IsSetTelecom() bool {
  return p.Telecom != nil
}

func (p *Patient_Contact) IsSetPeriod() bool {
  return p.Period != nil
}

func (p *Patient_Contact) IsSetID() bool {
  return p.ID != nil
}

func (p *Patient_Contact) IsSetExtension() bool {
  return p.Extension != nil
}

func (p *Patient_Contact) IsSetRelationship() bool {
  return p.Relationship != nil
}

func (p *Patient_Contact) IsSetName() bool {
  return p.Name != nil
}

func (p *Patient_Contact) IsSetModifierExtension() bool {
  return p.ModifierExtension != nil
}

func (p *Patient_Contact) IsSetAddress() bool {
  return p.Address != nil
}

func (p *Patient_Contact) IsSetGender() bool {
  return p.Gender != nil
}

func (p *Patient_Contact) IsSetOrganization() bool {
  return p.Organization != nil
}

func (p *Patient_Contact) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    case -5:
      if err := p.ReadField_5(iprot); err != nil {
        return err
      }
    case -6:
      if err := p.ReadField_6(iprot); err != nil {
        return err
      }
    case -7:
      if err := p.ReadField_7(iprot); err != nil {
        return err
      }
    case -8:
      if err := p.ReadField_8(iprot); err != nil {
        return err
      }
    case -9:
      if err := p.ReadField_9(iprot); err != nil {
        return err
      }
    case -10:
      if err := p.ReadField_10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Patient_Contact)  ReadField_1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ContactPoint, 0, size)
  p.Telecom =  tSlice
  for i := 0; i < size; i ++ {
    _elem24 := &ContactPoint{}
    if err := _elem24.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
    }
    p.Telecom = append(p.Telecom, _elem24)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient_Contact)  ReadField_2(iprot thrift.TProtocol) error {
  p.Period = &Period{}
  if err := p.Period.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Period), err)
  }
  return nil
}

func (p *Patient_Contact)  ReadField_3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -3: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *Patient_Contact)  ReadField_4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.Extension =  tSlice
  for i := 0; i < size; i ++ {
    _elem25 := &Extension{}
    if err := _elem25.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem25), err)
    }
    p.Extension = append(p.Extension, _elem25)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient_Contact)  ReadField_5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*CodeableConcept, 0, size)
  p.Relationship =  tSlice
  for i := 0; i < size; i ++ {
    _elem26 := &CodeableConcept{}
    if err := _elem26.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
    }
    p.Relationship = append(p.Relationship, _elem26)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient_Contact)  ReadField_6(iprot thrift.TProtocol) error {
  p.Name = &HumanName{}
  if err := p.Name.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Name), err)
  }
  return nil
}

func (p *Patient_Contact)  ReadField_7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.ModifierExtension =  tSlice
  for i := 0; i < size; i ++ {
    _elem27 := &Extension{}
    if err := _elem27.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem27), err)
    }
    p.ModifierExtension = append(p.ModifierExtension, _elem27)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient_Contact)  ReadField_8(iprot thrift.TProtocol) error {
  p.Address = &Address{}
  if err := p.Address.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Address), err)
  }
  return nil
}

func (p *Patient_Contact)  ReadField_9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -9: ", err)
} else {
  temp := EnumPatientContactGender(v)
  p.Gender = &temp
}
  return nil
}

func (p *Patient_Contact)  ReadField_10(iprot thrift.TProtocol) error {
  p.Organization = &Reference{}
  if err := p.Organization.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Organization), err)
  }
  return nil
}

func (p *Patient_Contact) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Patient_Contact"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_10(oprot); err != nil { return err }
    if err := p.writeField_9(oprot); err != nil { return err }
    if err := p.writeField_8(oprot); err != nil { return err }
    if err := p.writeField_7(oprot); err != nil { return err }
    if err := p.writeField_6(oprot); err != nil { return err }
    if err := p.writeField_5(oprot); err != nil { return err }
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Patient_Contact) writeField_10(oprot thrift.TProtocol) (err error) {
  if p.IsSetOrganization() {
    if err := oprot.WriteFieldBegin("organization", thrift.STRUCT, -10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -10:organization: ", p), err) }
    if err := p.Organization.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Organization), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -10:organization: ", p), err) }
  }
  return err
}

func (p *Patient_Contact) writeField_9(oprot thrift.TProtocol) (err error) {
  if p.IsSetGender() {
    if err := oprot.WriteFieldBegin("gender", thrift.I32, -9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -9:gender: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Gender)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gender (-9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -9:gender: ", p), err) }
  }
  return err
}

func (p *Patient_Contact) writeField_8(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddress() {
    if err := oprot.WriteFieldBegin("address", thrift.STRUCT, -8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -8:address: ", p), err) }
    if err := p.Address.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Address), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -8:address: ", p), err) }
  }
  return err
}

func (p *Patient_Contact) writeField_7(oprot thrift.TProtocol) (err error) {
  if p.IsSetModifierExtension() {
    if err := oprot.WriteFieldBegin("modifierExtension", thrift.LIST, -7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -7:modifierExtension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ModifierExtension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ModifierExtension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -7:modifierExtension: ", p), err) }
  }
  return err
}

func (p *Patient_Contact) writeField_6(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRUCT, -6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -6:name: ", p), err) }
    if err := p.Name.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Name), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -6:name: ", p), err) }
  }
  return err
}

func (p *Patient_Contact) writeField_5(oprot thrift.TProtocol) (err error) {
  if p.IsSetRelationship() {
    if err := oprot.WriteFieldBegin("relationship", thrift.LIST, -5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:relationship: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Relationship)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Relationship {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -5:relationship: ", p), err) }
  }
  return err
}

func (p *Patient_Contact) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtension() {
    if err := oprot.WriteFieldBegin("extension", thrift.LIST, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:extension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:extension: ", p), err) }
  }
  return err
}

func (p *Patient_Contact) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (-3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:id: ", p), err) }
  }
  return err
}

func (p *Patient_Contact) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPeriod() {
    if err := oprot.WriteFieldBegin("period", thrift.STRUCT, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:period: ", p), err) }
    if err := p.Period.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Period), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:period: ", p), err) }
  }
  return err
}

func (p *Patient_Contact) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetTelecom() {
    if err := oprot.WriteFieldBegin("telecom", thrift.LIST, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:telecom: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Telecom)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Telecom {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:telecom: ", p), err) }
  }
  return err
}

func (p *Patient_Contact) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Patient_Contact(%+v)", *p)
}

// Attributes:
//  - IdentifierSystem
//  - IdentifierExtension
//  - IdentifierId
//  - IdentifierType
//  - IdentifierValue
//  - IdentifierPeriod
//  - IdentifierAssigner
//  - IdentifierUse
type Identifier struct {
  IdentifierSystem string
  IdentifierExtension []*Extension
  IdentifierId string
  IdentifierType *CodeableConcept
  IdentifierValue string
  IdentifierPeriod *Period
  IdentifierAssigner *Reference
  IdentifierUse EnumIdentifierUse
}

func NewIdentifier() *Identifier {
  return &Identifier{}
}

var Identifier_IdentifierSystem_DEFAULT string
func (p *Identifier) GetIdentifierSystem() string {
  if !p.IsSetIdentifierSystem() {
    return Identifier_IdentifierSystem_DEFAULT
  }
return *p.IdentifierSystem
}
var Identifier_IdentifierExtension_DEFAULT []*Extension

func (p *Identifier) GetIdentifierExtension() []*Extension {
  return p.IdentifierExtension
}
var Identifier_IdentifierId_DEFAULT string
func (p *Identifier) GetIdentifierId() string {
  if !p.IsSetIdentifierId() {
    return Identifier_IdentifierId_DEFAULT
  }
return *p.IdentifierId
}
var Identifier_IdentifierType_DEFAULT *CodeableConcept
func (p *Identifier) GetIdentifierType() *CodeableConcept {
  if !p.IsSetIdentifierType() {
    return Identifier_IdentifierType_DEFAULT
  }
return p.IdentifierType
}
var Identifier_IdentifierValue_DEFAULT string
func (p *Identifier) GetIdentifierValue() string {
  if !p.IsSetIdentifierValue() {
    return Identifier_IdentifierValue_DEFAULT
  }
return *p.IdentifierValue
}
var Identifier_IdentifierPeriod_DEFAULT *Period
func (p *Identifier) GetIdentifierPeriod() *Period {
  if !p.IsSetIdentifierPeriod() {
    return Identifier_IdentifierPeriod_DEFAULT
  }
return p.IdentifierPeriod
}
var Identifier_IdentifierAssigner_DEFAULT *Reference
func (p *Identifier) GetIdentifierAssigner() *Reference {
  if !p.IsSetIdentifierAssigner() {
    return Identifier_IdentifierAssigner_DEFAULT
  }
return p.IdentifierAssigner
}
var Identifier_IdentifierUse_DEFAULT EnumIdentifierUse
func (p *Identifier) GetIdentifierUse() EnumIdentifierUse {
  if !p.IsSetIdentifierUse() {
    return Identifier_IdentifierUse_DEFAULT
  }
return *p.IdentifierUse
}
func (p *Identifier) IsSetIdentifierSystem() bool {
  return p.IdentifierSystem != nil
}

func (p *Identifier) IsSetIdentifierExtension() bool {
  return p.IdentifierExtension != nil
}

func (p *Identifier) IsSetIdentifierId() bool {
  return p.IdentifierId != nil
}

func (p *Identifier) IsSetIdentifierType() bool {
  return p.IdentifierType != nil
}

func (p *Identifier) IsSetIdentifierValue() bool {
  return p.IdentifierValue != nil
}

func (p *Identifier) IsSetIdentifierPeriod() bool {
  return p.IdentifierPeriod != nil
}

func (p *Identifier) IsSetIdentifierAssigner() bool {
  return p.IdentifierAssigner != nil
}

func (p *Identifier) IsSetIdentifierUse() bool {
  return p.IdentifierUse != nil
}

func (p *Identifier) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    case -5:
      if err := p.ReadField_5(iprot); err != nil {
        return err
      }
    case -6:
      if err := p.ReadField_6(iprot); err != nil {
        return err
      }
    case -7:
      if err := p.ReadField_7(iprot); err != nil {
        return err
      }
    case -8:
      if err := p.ReadField_8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Identifier)  ReadField_1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -1: ", err)
} else {
  p.IdentifierSystem = &v
}
  return nil
}

func (p *Identifier)  ReadField_2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.IdentifierExtension =  tSlice
  for i := 0; i < size; i ++ {
    _elem28 := &Extension{}
    if err := _elem28.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem28), err)
    }
    p.IdentifierExtension = append(p.IdentifierExtension, _elem28)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Identifier)  ReadField_3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -3: ", err)
} else {
  p.IdentifierId = &v
}
  return nil
}

func (p *Identifier)  ReadField_4(iprot thrift.TProtocol) error {
  p.IdentifierType = &CodeableConcept{}
  if err := p.IdentifierType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IdentifierType), err)
  }
  return nil
}

func (p *Identifier)  ReadField_5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -5: ", err)
} else {
  p.IdentifierValue = &v
}
  return nil
}

func (p *Identifier)  ReadField_6(iprot thrift.TProtocol) error {
  p.IdentifierPeriod = &Period{}
  if err := p.IdentifierPeriod.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IdentifierPeriod), err)
  }
  return nil
}

func (p *Identifier)  ReadField_7(iprot thrift.TProtocol) error {
  p.IdentifierAssigner = &Reference{}
  if err := p.IdentifierAssigner.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IdentifierAssigner), err)
  }
  return nil
}

func (p *Identifier)  ReadField_8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -8: ", err)
} else {
  temp := EnumIdentifierUse(v)
  p.IdentifierUse = &temp
}
  return nil
}

func (p *Identifier) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Identifier"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_8(oprot); err != nil { return err }
    if err := p.writeField_7(oprot); err != nil { return err }
    if err := p.writeField_6(oprot); err != nil { return err }
    if err := p.writeField_5(oprot); err != nil { return err }
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Identifier) writeField_8(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentifierUse() {
    if err := oprot.WriteFieldBegin("IdentifierUse", thrift.I32, -8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -8:IdentifierUse: ", p), err) }
    if err := oprot.WriteI32(int32(*p.IdentifierUse)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.IdentifierUse (-8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -8:IdentifierUse: ", p), err) }
  }
  return err
}

func (p *Identifier) writeField_7(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentifierAssigner() {
    if err := oprot.WriteFieldBegin("IdentifierAssigner", thrift.STRUCT, -7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -7:IdentifierAssigner: ", p), err) }
    if err := p.IdentifierAssigner.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IdentifierAssigner), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -7:IdentifierAssigner: ", p), err) }
  }
  return err
}

func (p *Identifier) writeField_6(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentifierPeriod() {
    if err := oprot.WriteFieldBegin("IdentifierPeriod", thrift.STRUCT, -6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -6:IdentifierPeriod: ", p), err) }
    if err := p.IdentifierPeriod.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IdentifierPeriod), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -6:IdentifierPeriod: ", p), err) }
  }
  return err
}

func (p *Identifier) writeField_5(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentifierValue() {
    if err := oprot.WriteFieldBegin("IdentifierValue", thrift.STRING, -5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:IdentifierValue: ", p), err) }
    if err := oprot.WriteString(string(*p.IdentifierValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.IdentifierValue (-5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -5:IdentifierValue: ", p), err) }
  }
  return err
}

func (p *Identifier) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentifierType() {
    if err := oprot.WriteFieldBegin("IdentifierType", thrift.STRUCT, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:IdentifierType: ", p), err) }
    if err := p.IdentifierType.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IdentifierType), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:IdentifierType: ", p), err) }
  }
  return err
}

func (p *Identifier) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentifierId() {
    if err := oprot.WriteFieldBegin("IdentifierId", thrift.STRING, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:IdentifierId: ", p), err) }
    if err := oprot.WriteString(string(*p.IdentifierId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.IdentifierId (-3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:IdentifierId: ", p), err) }
  }
  return err
}

func (p *Identifier) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentifierExtension() {
    if err := oprot.WriteFieldBegin("IdentifierExtension", thrift.LIST, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:IdentifierExtension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.IdentifierExtension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.IdentifierExtension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:IdentifierExtension: ", p), err) }
  }
  return err
}

func (p *Identifier) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentifierSystem() {
    if err := oprot.WriteFieldBegin("IdentifierSystem", thrift.STRING, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:IdentifierSystem: ", p), err) }
    if err := oprot.WriteString(string(*p.IdentifierSystem)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.IdentifierSystem (-1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:IdentifierSystem: ", p), err) }
  }
  return err
}

func (p *Identifier) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Identifier(%+v)", *p)
}

// Attributes:
//  - Language
//  - Extension
//  - ModifierExtension
//  - ID
type Patient_Communication struct {
  Language *CodeableConcept
  Extension []*Extension
  ModifierExtension []*Extension
  ID string
}

func NewPatient_Communication() *Patient_Communication {
  return &Patient_Communication{}
}

var Patient_Communication_Language_DEFAULT *CodeableConcept
func (p *Patient_Communication) GetLanguage() *CodeableConcept {
  if !p.IsSetLanguage() {
    return Patient_Communication_Language_DEFAULT
  }
return p.Language
}
var Patient_Communication_Extension_DEFAULT []*Extension

func (p *Patient_Communication) GetExtension() []*Extension {
  return p.Extension
}
var Patient_Communication_ModifierExtension_DEFAULT []*Extension

func (p *Patient_Communication) GetModifierExtension() []*Extension {
  return p.ModifierExtension
}
var Patient_Communication_ID_DEFAULT string
func (p *Patient_Communication) GetID() string {
  if !p.IsSetID() {
    return Patient_Communication_ID_DEFAULT
  }
return *p.ID
}
func (p *Patient_Communication) IsSetLanguage() bool {
  return p.Language != nil
}

func (p *Patient_Communication) IsSetExtension() bool {
  return p.Extension != nil
}

func (p *Patient_Communication) IsSetModifierExtension() bool {
  return p.ModifierExtension != nil
}

func (p *Patient_Communication) IsSetID() bool {
  return p.ID != nil
}

func (p *Patient_Communication) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Patient_Communication)  ReadField_1(iprot thrift.TProtocol) error {
  p.Language = &CodeableConcept{}
  if err := p.Language.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Language), err)
  }
  return nil
}

func (p *Patient_Communication)  ReadField_2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.Extension =  tSlice
  for i := 0; i < size; i ++ {
    _elem29 := &Extension{}
    if err := _elem29.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
    }
    p.Extension = append(p.Extension, _elem29)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient_Communication)  ReadField_3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.ModifierExtension =  tSlice
  for i := 0; i < size; i ++ {
    _elem30 := &Extension{}
    if err := _elem30.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
    }
    p.ModifierExtension = append(p.ModifierExtension, _elem30)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient_Communication)  ReadField_4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -4: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *Patient_Communication) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Patient_Communication"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Patient_Communication) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (-4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:id: ", p), err) }
  }
  return err
}

func (p *Patient_Communication) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetModifierExtension() {
    if err := oprot.WriteFieldBegin("modifierExtension", thrift.LIST, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:modifierExtension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ModifierExtension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ModifierExtension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:modifierExtension: ", p), err) }
  }
  return err
}

func (p *Patient_Communication) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtension() {
    if err := oprot.WriteFieldBegin("extension", thrift.LIST, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:extension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:extension: ", p), err) }
  }
  return err
}

func (p *Patient_Communication) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetLanguage() {
    if err := oprot.WriteFieldBegin("language", thrift.STRUCT, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:language: ", p), err) }
    if err := p.Language.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Language), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:language: ", p), err) }
  }
  return err
}

func (p *Patient_Communication) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Patient_Communication(%+v)", *p)
}

// Attributes:
//  - GenderStatus
//  - ID
//  - Extension
//  - ModifierExtension
//  - Species
//  - Breed
type Patient_Animal struct {
  GenderStatus *CodeableConcept
  ID string
  Extension []*Extension
  ModifierExtension []*Extension
  Species *CodeableConcept
  Breed *CodeableConcept
}

func NewPatient_Animal() *Patient_Animal {
  return &Patient_Animal{}
}

var Patient_Animal_GenderStatus_DEFAULT *CodeableConcept
func (p *Patient_Animal) GetGenderStatus() *CodeableConcept {
  if !p.IsSetGenderStatus() {
    return Patient_Animal_GenderStatus_DEFAULT
  }
return p.GenderStatus
}
var Patient_Animal_ID_DEFAULT string
func (p *Patient_Animal) GetID() string {
  if !p.IsSetID() {
    return Patient_Animal_ID_DEFAULT
  }
return *p.ID
}
var Patient_Animal_Extension_DEFAULT []*Extension

func (p *Patient_Animal) GetExtension() []*Extension {
  return p.Extension
}
var Patient_Animal_ModifierExtension_DEFAULT []*Extension

func (p *Patient_Animal) GetModifierExtension() []*Extension {
  return p.ModifierExtension
}
var Patient_Animal_Species_DEFAULT *CodeableConcept
func (p *Patient_Animal) GetSpecies() *CodeableConcept {
  if !p.IsSetSpecies() {
    return Patient_Animal_Species_DEFAULT
  }
return p.Species
}
var Patient_Animal_Breed_DEFAULT *CodeableConcept
func (p *Patient_Animal) GetBreed() *CodeableConcept {
  if !p.IsSetBreed() {
    return Patient_Animal_Breed_DEFAULT
  }
return p.Breed
}
func (p *Patient_Animal) IsSetGenderStatus() bool {
  return p.GenderStatus != nil
}

func (p *Patient_Animal) IsSetID() bool {
  return p.ID != nil
}

func (p *Patient_Animal) IsSetExtension() bool {
  return p.Extension != nil
}

func (p *Patient_Animal) IsSetModifierExtension() bool {
  return p.ModifierExtension != nil
}

func (p *Patient_Animal) IsSetSpecies() bool {
  return p.Species != nil
}

func (p *Patient_Animal) IsSetBreed() bool {
  return p.Breed != nil
}

func (p *Patient_Animal) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    case -5:
      if err := p.ReadField_5(iprot); err != nil {
        return err
      }
    case -6:
      if err := p.ReadField_6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Patient_Animal)  ReadField_1(iprot thrift.TProtocol) error {
  p.GenderStatus = &CodeableConcept{}
  if err := p.GenderStatus.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GenderStatus), err)
  }
  return nil
}

func (p *Patient_Animal)  ReadField_2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -2: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *Patient_Animal)  ReadField_3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.Extension =  tSlice
  for i := 0; i < size; i ++ {
    _elem31 := &Extension{}
    if err := _elem31.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem31), err)
    }
    p.Extension = append(p.Extension, _elem31)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient_Animal)  ReadField_4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.ModifierExtension =  tSlice
  for i := 0; i < size; i ++ {
    _elem32 := &Extension{}
    if err := _elem32.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem32), err)
    }
    p.ModifierExtension = append(p.ModifierExtension, _elem32)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient_Animal)  ReadField_5(iprot thrift.TProtocol) error {
  p.Species = &CodeableConcept{}
  if err := p.Species.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Species), err)
  }
  return nil
}

func (p *Patient_Animal)  ReadField_6(iprot thrift.TProtocol) error {
  p.Breed = &CodeableConcept{}
  if err := p.Breed.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Breed), err)
  }
  return nil
}

func (p *Patient_Animal) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Patient_Animal"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_6(oprot); err != nil { return err }
    if err := p.writeField_5(oprot); err != nil { return err }
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Patient_Animal) writeField_6(oprot thrift.TProtocol) (err error) {
  if p.IsSetBreed() {
    if err := oprot.WriteFieldBegin("breed", thrift.STRUCT, -6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -6:breed: ", p), err) }
    if err := p.Breed.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Breed), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -6:breed: ", p), err) }
  }
  return err
}

func (p *Patient_Animal) writeField_5(oprot thrift.TProtocol) (err error) {
  if p.IsSetSpecies() {
    if err := oprot.WriteFieldBegin("species", thrift.STRUCT, -5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:species: ", p), err) }
    if err := p.Species.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Species), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -5:species: ", p), err) }
  }
  return err
}

func (p *Patient_Animal) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetModifierExtension() {
    if err := oprot.WriteFieldBegin("modifierExtension", thrift.LIST, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:modifierExtension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ModifierExtension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ModifierExtension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:modifierExtension: ", p), err) }
  }
  return err
}

func (p *Patient_Animal) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtension() {
    if err := oprot.WriteFieldBegin("extension", thrift.LIST, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:extension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:extension: ", p), err) }
  }
  return err
}

func (p *Patient_Animal) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (-2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:id: ", p), err) }
  }
  return err
}

func (p *Patient_Animal) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetGenderStatus() {
    if err := oprot.WriteFieldBegin("genderStatus", thrift.STRUCT, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:genderStatus: ", p), err) }
    if err := p.GenderStatus.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GenderStatus), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:genderStatus: ", p), err) }
  }
  return err
}

func (p *Patient_Animal) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Patient_Animal(%+v)", *p)
}

// Attributes:
//  - Extension
//  - Other
//  - Type
//  - ModifierExtension
//  - ID
type Patient_Link struct {
  Extension []*Extension
  Other *Reference
  Type EnumPatientLinkType
  ModifierExtension []*Extension
  ID string
}

func NewPatient_Link() *Patient_Link {
  return &Patient_Link{}
}

var Patient_Link_Extension_DEFAULT []*Extension

func (p *Patient_Link) GetExtension() []*Extension {
  return p.Extension
}
var Patient_Link_Other_DEFAULT *Reference
func (p *Patient_Link) GetOther() *Reference {
  if !p.IsSetOther() {
    return Patient_Link_Other_DEFAULT
  }
return p.Other
}
var Patient_Link_Type_DEFAULT EnumPatientLinkType
func (p *Patient_Link) GetType() EnumPatientLinkType {
  if !p.IsSetType() {
    return Patient_Link_Type_DEFAULT
  }
return *p.Type
}
var Patient_Link_ModifierExtension_DEFAULT []*Extension

func (p *Patient_Link) GetModifierExtension() []*Extension {
  return p.ModifierExtension
}
var Patient_Link_ID_DEFAULT string
func (p *Patient_Link) GetID() string {
  if !p.IsSetID() {
    return Patient_Link_ID_DEFAULT
  }
return *p.ID
}
func (p *Patient_Link) IsSetExtension() bool {
  return p.Extension != nil
}

func (p *Patient_Link) IsSetOther() bool {
  return p.Other != nil
}

func (p *Patient_Link) IsSetType() bool {
  return p.Type != nil
}

func (p *Patient_Link) IsSetModifierExtension() bool {
  return p.ModifierExtension != nil
}

func (p *Patient_Link) IsSetID() bool {
  return p.ID != nil
}

func (p *Patient_Link) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    case -5:
      if err := p.ReadField_5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Patient_Link)  ReadField_1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.Extension =  tSlice
  for i := 0; i < size; i ++ {
    _elem33 := &Extension{}
    if err := _elem33.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem33), err)
    }
    p.Extension = append(p.Extension, _elem33)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient_Link)  ReadField_2(iprot thrift.TProtocol) error {
  p.Other = &Reference{}
  if err := p.Other.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Other), err)
  }
  return nil
}

func (p *Patient_Link)  ReadField_3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -3: ", err)
} else {
  temp := EnumPatientLinkType(v)
  p.Type = &temp
}
  return nil
}

func (p *Patient_Link)  ReadField_4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.ModifierExtension =  tSlice
  for i := 0; i < size; i ++ {
    _elem34 := &Extension{}
    if err := _elem34.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem34), err)
    }
    p.ModifierExtension = append(p.ModifierExtension, _elem34)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient_Link)  ReadField_5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -5: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *Patient_Link) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Patient_Link"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_5(oprot); err != nil { return err }
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Patient_Link) writeField_5(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, -5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (-5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -5:id: ", p), err) }
  }
  return err
}

func (p *Patient_Link) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetModifierExtension() {
    if err := oprot.WriteFieldBegin("modifierExtension", thrift.LIST, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:modifierExtension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ModifierExtension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ModifierExtension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:modifierExtension: ", p), err) }
  }
  return err
}

func (p *Patient_Link) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin("type", thrift.I32, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (-3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:type: ", p), err) }
  }
  return err
}

func (p *Patient_Link) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetOther() {
    if err := oprot.WriteFieldBegin("other", thrift.STRUCT, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:other: ", p), err) }
    if err := p.Other.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Other), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:other: ", p), err) }
  }
  return err
}

func (p *Patient_Link) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtension() {
    if err := oprot.WriteFieldBegin("extension", thrift.LIST, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:extension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:extension: ", p), err) }
  }
  return err
}

func (p *Patient_Link) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Patient_Link(%+v)", *p)
}

// Attributes:
//  - ResourceType
//  - Contact
//  - ManagingOrganization
//  - Gender
//  - BirthDate
//  - Extension
//  - ID
//  - Photo
//  - Communication
//  - GeneralPractitioner
//  - MaritalStatus
//  - Name
//  - DeceasedDateTime
//  - Meta
//  - ModifierExtension
//  - Identifier
//  - Animal
//  - Link
//  - Language
//  - Telecom
//  - Address
//  - ImplicitRules
//  - Text
type Patient struct {
  ResourceType EnumPatientResourceType
  Contact []*Patient_Contact
  ManagingOrganization *Reference
  Gender EnumPatientGender
  BirthDate string
  Extension []*Extension
  ID string
  Photo []*Attachment
  Communication []*Patient_Communication
  GeneralPractitioner []*Reference
  MaritalStatus *CodeableConcept
  Name []*HumanName
  DeceasedDateTime string
  Meta *Meta
  ModifierExtension []*Extension
  Identifier []*Identifier
  Animal *Patient_Animal
  Link []*Patient_Link
  Language string
  Telecom []*ContactPoint
  Address []*Address
  ImplicitRules string
  Text *Narrative
}

func NewPatient() *Patient {
  return &Patient{}
}

var Patient_ResourceType_DEFAULT EnumPatientResourceType
func (p *Patient) GetResourceType() EnumPatientResourceType {
  if !p.IsSetResourceType() {
    return Patient_ResourceType_DEFAULT
  }
return *p.ResourceType
}
var Patient_Contact_DEFAULT []*Patient_Contact

func (p *Patient) GetContact() []*Patient_Contact {
  return p.Contact
}
var Patient_ManagingOrganization_DEFAULT *Reference
func (p *Patient) GetManagingOrganization() *Reference {
  if !p.IsSetManagingOrganization() {
    return Patient_ManagingOrganization_DEFAULT
  }
return p.ManagingOrganization
}
var Patient_Gender_DEFAULT EnumPatientGender
func (p *Patient) GetGender() EnumPatientGender {
  if !p.IsSetGender() {
    return Patient_Gender_DEFAULT
  }
return *p.Gender
}
var Patient_BirthDate_DEFAULT string
func (p *Patient) GetBirthDate() string {
  if !p.IsSetBirthDate() {
    return Patient_BirthDate_DEFAULT
  }
return *p.BirthDate
}
var Patient_Extension_DEFAULT []*Extension

func (p *Patient) GetExtension() []*Extension {
  return p.Extension
}
var Patient_ID_DEFAULT string
func (p *Patient) GetID() string {
  if !p.IsSetID() {
    return Patient_ID_DEFAULT
  }
return *p.ID
}
var Patient_Photo_DEFAULT []*Attachment

func (p *Patient) GetPhoto() []*Attachment {
  return p.Photo
}
var Patient_Communication_DEFAULT []*Patient_Communication

func (p *Patient) GetCommunication() []*Patient_Communication {
  return p.Communication
}
var Patient_GeneralPractitioner_DEFAULT []*Reference

func (p *Patient) GetGeneralPractitioner() []*Reference {
  return p.GeneralPractitioner
}
var Patient_MaritalStatus_DEFAULT *CodeableConcept
func (p *Patient) GetMaritalStatus() *CodeableConcept {
  if !p.IsSetMaritalStatus() {
    return Patient_MaritalStatus_DEFAULT
  }
return p.MaritalStatus
}
var Patient_Name_DEFAULT []*HumanName

func (p *Patient) GetName() []*HumanName {
  return p.Name
}
var Patient_DeceasedDateTime_DEFAULT string
func (p *Patient) GetDeceasedDateTime() string {
  if !p.IsSetDeceasedDateTime() {
    return Patient_DeceasedDateTime_DEFAULT
  }
return *p.DeceasedDateTime
}
var Patient_Meta_DEFAULT *Meta
func (p *Patient) GetMeta() *Meta {
  if !p.IsSetMeta() {
    return Patient_Meta_DEFAULT
  }
return p.Meta
}
var Patient_ModifierExtension_DEFAULT []*Extension

func (p *Patient) GetModifierExtension() []*Extension {
  return p.ModifierExtension
}
var Patient_Identifier_DEFAULT []*Identifier

func (p *Patient) GetIdentifier() []*Identifier {
  return p.Identifier
}
var Patient_Animal_DEFAULT *Patient_Animal
func (p *Patient) GetAnimal() *Patient_Animal {
  if !p.IsSetAnimal() {
    return Patient_Animal_DEFAULT
  }
return p.Animal
}
var Patient_Link_DEFAULT []*Patient_Link

func (p *Patient) GetLink() []*Patient_Link {
  return p.Link
}
var Patient_Language_DEFAULT string
func (p *Patient) GetLanguage() string {
  if !p.IsSetLanguage() {
    return Patient_Language_DEFAULT
  }
return *p.Language
}
var Patient_Telecom_DEFAULT []*ContactPoint

func (p *Patient) GetTelecom() []*ContactPoint {
  return p.Telecom
}
var Patient_Address_DEFAULT []*Address

func (p *Patient) GetAddress() []*Address {
  return p.Address
}
var Patient_ImplicitRules_DEFAULT string
func (p *Patient) GetImplicitRules() string {
  if !p.IsSetImplicitRules() {
    return Patient_ImplicitRules_DEFAULT
  }
return *p.ImplicitRules
}
var Patient_Text_DEFAULT *Narrative
func (p *Patient) GetText() *Narrative {
  if !p.IsSetText() {
    return Patient_Text_DEFAULT
  }
return p.Text
}
func (p *Patient) IsSetResourceType() bool {
  return p.ResourceType != nil
}

func (p *Patient) IsSetContact() bool {
  return p.Contact != nil
}

func (p *Patient) IsSetManagingOrganization() bool {
  return p.ManagingOrganization != nil
}

func (p *Patient) IsSetGender() bool {
  return p.Gender != nil
}

func (p *Patient) IsSetBirthDate() bool {
  return p.BirthDate != nil
}

func (p *Patient) IsSetExtension() bool {
  return p.Extension != nil
}

func (p *Patient) IsSetID() bool {
  return p.ID != nil
}

func (p *Patient) IsSetPhoto() bool {
  return p.Photo != nil
}

func (p *Patient) IsSetCommunication() bool {
  return p.Communication != nil
}

func (p *Patient) IsSetGeneralPractitioner() bool {
  return p.GeneralPractitioner != nil
}

func (p *Patient) IsSetMaritalStatus() bool {
  return p.MaritalStatus != nil
}

func (p *Patient) IsSetName() bool {
  return p.Name != nil
}

func (p *Patient) IsSetDeceasedDateTime() bool {
  return p.DeceasedDateTime != nil
}

func (p *Patient) IsSetMeta() bool {
  return p.Meta != nil
}

func (p *Patient) IsSetModifierExtension() bool {
  return p.ModifierExtension != nil
}

func (p *Patient) IsSetIdentifier() bool {
  return p.Identifier != nil
}

func (p *Patient) IsSetAnimal() bool {
  return p.Animal != nil
}

func (p *Patient) IsSetLink() bool {
  return p.Link != nil
}

func (p *Patient) IsSetLanguage() bool {
  return p.Language != nil
}

func (p *Patient) IsSetTelecom() bool {
  return p.Telecom != nil
}

func (p *Patient) IsSetAddress() bool {
  return p.Address != nil
}

func (p *Patient) IsSetImplicitRules() bool {
  return p.ImplicitRules != nil
}

func (p *Patient) IsSetText() bool {
  return p.Text != nil
}

func (p *Patient) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if err := p.ReadField_1(iprot); err != nil {
        return err
      }
    case -2:
      if err := p.ReadField_2(iprot); err != nil {
        return err
      }
    case -3:
      if err := p.ReadField_3(iprot); err != nil {
        return err
      }
    case -4:
      if err := p.ReadField_4(iprot); err != nil {
        return err
      }
    case -5:
      if err := p.ReadField_5(iprot); err != nil {
        return err
      }
    case -6:
      if err := p.ReadField_6(iprot); err != nil {
        return err
      }
    case -7:
      if err := p.ReadField_7(iprot); err != nil {
        return err
      }
    case -8:
      if err := p.ReadField_8(iprot); err != nil {
        return err
      }
    case -9:
      if err := p.ReadField_9(iprot); err != nil {
        return err
      }
    case -10:
      if err := p.ReadField_10(iprot); err != nil {
        return err
      }
    case -11:
      if err := p.ReadField_11(iprot); err != nil {
        return err
      }
    case -12:
      if err := p.ReadField_12(iprot); err != nil {
        return err
      }
    case -13:
      if err := p.ReadField_13(iprot); err != nil {
        return err
      }
    case -14:
      if err := p.ReadField_14(iprot); err != nil {
        return err
      }
    case -15:
      if err := p.ReadField_15(iprot); err != nil {
        return err
      }
    case -16:
      if err := p.ReadField_16(iprot); err != nil {
        return err
      }
    case -17:
      if err := p.ReadField_17(iprot); err != nil {
        return err
      }
    case -18:
      if err := p.ReadField_18(iprot); err != nil {
        return err
      }
    case -19:
      if err := p.ReadField_19(iprot); err != nil {
        return err
      }
    case -20:
      if err := p.ReadField_20(iprot); err != nil {
        return err
      }
    case -21:
      if err := p.ReadField_21(iprot); err != nil {
        return err
      }
    case -22:
      if err := p.ReadField_22(iprot); err != nil {
        return err
      }
    case -23:
      if err := p.ReadField_23(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Patient)  ReadField_1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -1: ", err)
} else {
  temp := EnumPatientResourceType(v)
  p.ResourceType = &temp
}
  return nil
}

func (p *Patient)  ReadField_2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Patient_Contact, 0, size)
  p.Contact =  tSlice
  for i := 0; i < size; i ++ {
    _elem35 := &Patient_Contact{}
    if err := _elem35.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem35), err)
    }
    p.Contact = append(p.Contact, _elem35)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient)  ReadField_3(iprot thrift.TProtocol) error {
  p.ManagingOrganization = &Reference{}
  if err := p.ManagingOrganization.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ManagingOrganization), err)
  }
  return nil
}

func (p *Patient)  ReadField_4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field -4: ", err)
} else {
  temp := EnumPatientGender(v)
  p.Gender = &temp
}
  return nil
}

func (p *Patient)  ReadField_5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -5: ", err)
} else {
  p.BirthDate = &v
}
  return nil
}

func (p *Patient)  ReadField_6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.Extension =  tSlice
  for i := 0; i < size; i ++ {
    _elem36 := &Extension{}
    if err := _elem36.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem36), err)
    }
    p.Extension = append(p.Extension, _elem36)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient)  ReadField_7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -7: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *Patient)  ReadField_8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Attachment, 0, size)
  p.Photo =  tSlice
  for i := 0; i < size; i ++ {
    _elem37 := &Attachment{}
    if err := _elem37.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
    }
    p.Photo = append(p.Photo, _elem37)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient)  ReadField_9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Patient_Communication, 0, size)
  p.Communication =  tSlice
  for i := 0; i < size; i ++ {
    _elem38 := &Patient_Communication{}
    if err := _elem38.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem38), err)
    }
    p.Communication = append(p.Communication, _elem38)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient)  ReadField_10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Reference, 0, size)
  p.GeneralPractitioner =  tSlice
  for i := 0; i < size; i ++ {
    _elem39 := &Reference{}
    if err := _elem39.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem39), err)
    }
    p.GeneralPractitioner = append(p.GeneralPractitioner, _elem39)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient)  ReadField_11(iprot thrift.TProtocol) error {
  p.MaritalStatus = &CodeableConcept{}
  if err := p.MaritalStatus.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MaritalStatus), err)
  }
  return nil
}

func (p *Patient)  ReadField_12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HumanName, 0, size)
  p.Name =  tSlice
  for i := 0; i < size; i ++ {
    _elem40 := &HumanName{}
    if err := _elem40.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem40), err)
    }
    p.Name = append(p.Name, _elem40)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient)  ReadField_13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -13: ", err)
} else {
  p.DeceasedDateTime = &v
}
  return nil
}

func (p *Patient)  ReadField_14(iprot thrift.TProtocol) error {
  p.Meta = &Meta{}
  if err := p.Meta.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Meta), err)
  }
  return nil
}

func (p *Patient)  ReadField_15(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Extension, 0, size)
  p.ModifierExtension =  tSlice
  for i := 0; i < size; i ++ {
    _elem41 := &Extension{}
    if err := _elem41.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem41), err)
    }
    p.ModifierExtension = append(p.ModifierExtension, _elem41)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient)  ReadField_16(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Identifier, 0, size)
  p.Identifier =  tSlice
  for i := 0; i < size; i ++ {
    _elem42 := &Identifier{}
    if err := _elem42.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem42), err)
    }
    p.Identifier = append(p.Identifier, _elem42)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient)  ReadField_17(iprot thrift.TProtocol) error {
  p.Animal = &Patient_Animal{}
  if err := p.Animal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Animal), err)
  }
  return nil
}

func (p *Patient)  ReadField_18(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Patient_Link, 0, size)
  p.Link =  tSlice
  for i := 0; i < size; i ++ {
    _elem43 := &Patient_Link{}
    if err := _elem43.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem43), err)
    }
    p.Link = append(p.Link, _elem43)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient)  ReadField_19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -19: ", err)
} else {
  p.Language = &v
}
  return nil
}

func (p *Patient)  ReadField_20(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ContactPoint, 0, size)
  p.Telecom =  tSlice
  for i := 0; i < size; i ++ {
    _elem44 := &ContactPoint{}
    if err := _elem44.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem44), err)
    }
    p.Telecom = append(p.Telecom, _elem44)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient)  ReadField_21(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Address, 0, size)
  p.Address =  tSlice
  for i := 0; i < size; i ++ {
    _elem45 := &Address{}
    if err := _elem45.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem45), err)
    }
    p.Address = append(p.Address, _elem45)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Patient)  ReadField_22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field -22: ", err)
} else {
  p.ImplicitRules = &v
}
  return nil
}

func (p *Patient)  ReadField_23(iprot thrift.TProtocol) error {
  p.Text = &Narrative{}
  if err := p.Text.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Text), err)
  }
  return nil
}

func (p *Patient) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Patient"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_23(oprot); err != nil { return err }
    if err := p.writeField_22(oprot); err != nil { return err }
    if err := p.writeField_21(oprot); err != nil { return err }
    if err := p.writeField_20(oprot); err != nil { return err }
    if err := p.writeField_19(oprot); err != nil { return err }
    if err := p.writeField_18(oprot); err != nil { return err }
    if err := p.writeField_17(oprot); err != nil { return err }
    if err := p.writeField_16(oprot); err != nil { return err }
    if err := p.writeField_15(oprot); err != nil { return err }
    if err := p.writeField_14(oprot); err != nil { return err }
    if err := p.writeField_13(oprot); err != nil { return err }
    if err := p.writeField_12(oprot); err != nil { return err }
    if err := p.writeField_11(oprot); err != nil { return err }
    if err := p.writeField_10(oprot); err != nil { return err }
    if err := p.writeField_9(oprot); err != nil { return err }
    if err := p.writeField_8(oprot); err != nil { return err }
    if err := p.writeField_7(oprot); err != nil { return err }
    if err := p.writeField_6(oprot); err != nil { return err }
    if err := p.writeField_5(oprot); err != nil { return err }
    if err := p.writeField_4(oprot); err != nil { return err }
    if err := p.writeField_3(oprot); err != nil { return err }
    if err := p.writeField_2(oprot); err != nil { return err }
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Patient) writeField_23(oprot thrift.TProtocol) (err error) {
  if p.IsSetText() {
    if err := oprot.WriteFieldBegin("text", thrift.STRUCT, -23); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -23:text: ", p), err) }
    if err := p.Text.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Text), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -23:text: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_22(oprot thrift.TProtocol) (err error) {
  if p.IsSetImplicitRules() {
    if err := oprot.WriteFieldBegin("implicitRules", thrift.STRING, -22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -22:implicitRules: ", p), err) }
    if err := oprot.WriteString(string(*p.ImplicitRules)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.implicitRules (-22) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -22:implicitRules: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_21(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddress() {
    if err := oprot.WriteFieldBegin("address", thrift.LIST, -21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -21:address: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Address)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Address {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -21:address: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_20(oprot thrift.TProtocol) (err error) {
  if p.IsSetTelecom() {
    if err := oprot.WriteFieldBegin("telecom", thrift.LIST, -20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -20:telecom: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Telecom)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Telecom {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -20:telecom: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_19(oprot thrift.TProtocol) (err error) {
  if p.IsSetLanguage() {
    if err := oprot.WriteFieldBegin("language", thrift.STRING, -19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -19:language: ", p), err) }
    if err := oprot.WriteString(string(*p.Language)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.language (-19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -19:language: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_18(oprot thrift.TProtocol) (err error) {
  if p.IsSetLink() {
    if err := oprot.WriteFieldBegin("link", thrift.LIST, -18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -18:link: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Link)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Link {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -18:link: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_17(oprot thrift.TProtocol) (err error) {
  if p.IsSetAnimal() {
    if err := oprot.WriteFieldBegin("animal", thrift.STRUCT, -17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -17:animal: ", p), err) }
    if err := p.Animal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Animal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -17:animal: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_16(oprot thrift.TProtocol) (err error) {
  if p.IsSetIdentifier() {
    if err := oprot.WriteFieldBegin("identifier", thrift.LIST, -16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -16:identifier: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Identifier)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Identifier {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -16:identifier: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_15(oprot thrift.TProtocol) (err error) {
  if p.IsSetModifierExtension() {
    if err := oprot.WriteFieldBegin("modifierExtension", thrift.LIST, -15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -15:modifierExtension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ModifierExtension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ModifierExtension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -15:modifierExtension: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_14(oprot thrift.TProtocol) (err error) {
  if p.IsSetMeta() {
    if err := oprot.WriteFieldBegin("meta", thrift.STRUCT, -14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -14:meta: ", p), err) }
    if err := p.Meta.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Meta), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -14:meta: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_13(oprot thrift.TProtocol) (err error) {
  if p.IsSetDeceasedDateTime() {
    if err := oprot.WriteFieldBegin("deceasedDateTime", thrift.STRING, -13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -13:deceasedDateTime: ", p), err) }
    if err := oprot.WriteString(string(*p.DeceasedDateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.deceasedDateTime (-13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -13:deceasedDateTime: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_12(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.LIST, -12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -12:name: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Name)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Name {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -12:name: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_11(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaritalStatus() {
    if err := oprot.WriteFieldBegin("maritalStatus", thrift.STRUCT, -11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -11:maritalStatus: ", p), err) }
    if err := p.MaritalStatus.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MaritalStatus), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -11:maritalStatus: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_10(oprot thrift.TProtocol) (err error) {
  if p.IsSetGeneralPractitioner() {
    if err := oprot.WriteFieldBegin("generalPractitioner", thrift.LIST, -10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -10:generalPractitioner: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.GeneralPractitioner)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.GeneralPractitioner {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -10:generalPractitioner: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_9(oprot thrift.TProtocol) (err error) {
  if p.IsSetCommunication() {
    if err := oprot.WriteFieldBegin("communication", thrift.LIST, -9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -9:communication: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Communication)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Communication {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -9:communication: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_8(oprot thrift.TProtocol) (err error) {
  if p.IsSetPhoto() {
    if err := oprot.WriteFieldBegin("photo", thrift.LIST, -8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -8:photo: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Photo)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Photo {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -8:photo: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_7(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, -7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -7:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (-7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -7:id: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_6(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtension() {
    if err := oprot.WriteFieldBegin("extension", thrift.LIST, -6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -6:extension: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extension)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extension {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -6:extension: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_5(oprot thrift.TProtocol) (err error) {
  if p.IsSetBirthDate() {
    if err := oprot.WriteFieldBegin("birthDate", thrift.STRING, -5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -5:birthDate: ", p), err) }
    if err := oprot.WriteString(string(*p.BirthDate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.birthDate (-5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -5:birthDate: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_4(oprot thrift.TProtocol) (err error) {
  if p.IsSetGender() {
    if err := oprot.WriteFieldBegin("gender", thrift.I32, -4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -4:gender: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Gender)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gender (-4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -4:gender: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_3(oprot thrift.TProtocol) (err error) {
  if p.IsSetManagingOrganization() {
    if err := oprot.WriteFieldBegin("managingOrganization", thrift.STRUCT, -3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -3:managingOrganization: ", p), err) }
    if err := p.ManagingOrganization.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ManagingOrganization), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -3:managingOrganization: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_2(oprot thrift.TProtocol) (err error) {
  if p.IsSetContact() {
    if err := oprot.WriteFieldBegin("contact", thrift.LIST, -2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -2:contact: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Contact)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Contact {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -2:contact: ", p), err) }
  }
  return err
}

func (p *Patient) writeField_1(oprot thrift.TProtocol) (err error) {
  if p.IsSetResourceType() {
    if err := oprot.WriteFieldBegin("resourceType", thrift.I32, -1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:resourceType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ResourceType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resourceType (-1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error -1:resourceType: ", p), err) }
  }
  return err
}

func (p *Patient) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Patient(%+v)", *p)
}

